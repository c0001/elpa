\input texinfo
@setfilename excorporate.info
@settitle Excorporate Manual

@dircategory Emacs
@direntry
* Excorporate: (excorporate).  Exchange Web Services integration for Emacs.
@end direntry

@copying
Copyright @copyright{} 2016 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover, or Back-Cover Texts.  A copy of
the license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.

All Emacs Lisp code contained in this document may be used, distributed,
and modified without restriction.
@end quotation
@end copying

@titlepage
@title Excorporate Manual
@author Thomas Fitzsimmons
@page
@insertcopying
@end titlepage

@contents

@node Top
@top Excorporate Manual

Excorporate provides Exchange Web Services (EWS) support for Emacs.

If the Exchange server you access is configured to provide EWS
support, then there's an 86% chance that Excorporate will enable you
to retrieve your calendar entries from the comfort of Emacs.

The 14% failure rate is because authenticating against an Exchange
server can be challenging.

Accessing an Exchange server through an HTTPS proxy is possible now that
@uref{https://debbugs.gnu.org/cgi/bugreport.cgi?bug=10} and
@uref{https://debbugs.gnu.org/cgi/bugreport.cgi?bug=35969} are fixed.

Kerberos/GSSAPI authentication needs more experimentation.

Reports of success or failure of different connection types are
welcome, as are patches to enable more of these access scenarios.  See
@pxref{Reporting Bugs}.

@menu
* Reporting Bugs::              How to report bugs in Excorporate
* Installation::                Getting and installing @code{excorporate}.
* Configuration::               Configuring @code{excorporate}.
* Usage::                       Using @code{excorporate}.
* Troubleshooting::             Debugging why a connection failed
* API Usage::                   Using the API provided by @code{excorporate}.
@end menu

@node Reporting Bugs
@chapter Reporting Bugs

@noindent
To report a bug, send an email to @code{bug-gnu-emacs@@gnu.org} using
your favourite email program.  Put ``Excorporate'' somewhere in the
subject line, for example: ``Excorporate: Failed to authenticate''.

@node Installation
@chapter Installation

Excorporate works on Emacs versions >= 24.1.

@noindent
Install @code{excorporate} from the GNU ELPA repository:

@code{M-x package-install RET excorporate}

@node Configuration
@chapter Configuration

@noindent
Ideally you won't need to configure Excorporate beyond providing your
account email address.  On friendly Exchange setups, Excorporate can
discover the EWS URL automatically.

@noindent
Run:

@code{M-x excorporate}

@noindent
which will prompt you for the Exchange account configuration.  Follow
the prompts and if all goes well, you'll see a message in the minibuffer
or in *Messages* saying that the connection is ready.  Using the
prompts, you can first try with autodiscovery.  If autodiscovery runs
out of URLs to try, re-run @code{excorporate}, saying 'n' to the
autodiscovery attempt, at which point you will be asked for the EWS URL.

@noindent
To save a working configuration, customize
@code{excorporate-configuration}:

@code{M-x customize-variable RET excorporate-configuration}

@noindent
After saving the configuration, try @code{M-x excorporate} again.

@noindent
If neither autodiscovery nor specifying the EWS URL work,
@pxref{Troubleshooting}.

@node Usage
@chapter Usage

@noindent
Excorporate can put entries it retrieves into the Emacs Diary, and use
@code{appt} to remind you a few minutes before a meeting starts.  To
enable this support, do:

@code{M-x excorporate-diary-enable}

@noindent
Open the calendar with:

@code{M-x calendar}

@noindent
move the cursor to the date you want to see meetings for, and press
`d'.  Some time later, asynchronously, a window will pop up containing
events retrieved from the Exchange server in addition to
locally-entered diary events.  The events are all sorted by time.

Excorporate also binds `e' in @code{*Calendar*} buffers to
@code{excorporate-calendar-show-day-function} to allow a different
view of retrieved events.  By default,
@code{excorporate-calendar-show-day-function} is set to
@code{exco-org-show-day} which displays meetings in a temporary
read-only Org Mode buffer named @code{*Excorporate*}.

In the @code{*Excorporate*} buffer, you can run @kbd{M-x
exco-org-decline-meeting-request} to decline a meeting request.  To
provide a response message, @kbd{C-u M-x
exco-org-decline-meeting-request}.  Likewise for accepting
(@code{exco-org-accept-meeting-request})or tentatively accepting
(@code{exco-org-accept-meeting-request}) meeting requests.

A meeting is a calendar event to which at least one other person is
invited.  To cancel a meeting (or an occurence of a recurring meeting)
that you organized, use @kbd{M-x exco-org-cancel-meeting}.

An appointment is a calendar item that has no invitees.  To delete an
appointment that you created, type @kbd{M-x
exco-org-delete-appointment}.

If you prefer, you can install the @code{calfw} package, and set
@code{excorporate-calendar-show-day-function} to
@code{exco-calfw-show-day}.

After you've retrieved today's meetings, @code{appt} will warn you
several minutes before your next meeting starts by popping up a window
with the meeting details.

If you leave Emacs running overnight, at 12:01 AM @code{appt} (via
Excorporate) will retrieve your meetings and display your diary so
that you see the day's events first thing in the morning.

@node Troubleshooting
@chapter Troubleshooting

@noindent
First, you'll want to double-check that the Exchange server you're
trying to access provides EWS support.  If it doesn't, Excorporate
can't do anything for you.  Before asking your Exchange administrator,
check intranet wikis and so forth; other users of non-standard clients
may have already found the EWS URL.  This is called the ``EWS
endpoint''.  It can be as simple as, e.g.:

@code{https://mail.gnu.org/ews/exchange.asmx}

@noindent
First you need to make sure you can access the endpoint.

@noindent
For Exchange Web Services (EWS) which Excorporate uses, you'll have to
determine the EWS endpoint for your Exchange account, call it
@code{ews-url}.  It is usually something like:

   https://<mail host name>/ews/exchange.asmx

@noindent
Excorporate calculates the WSDL URL, call it @code{wsdl-url}, by
replacing the endpoint's last path element with ``Services.wsdl'':

   https://<mail host name>/ews/Services.wsdl

@noindent
Before even attempting Excorporate, you have to make these succeed:

@example
(with-current-buffer
 (url-retrieve-synchronously ews-url)
 (buffer-string))
@end example

@noindent
When this works, you'll see web page text in *Messages*, containing a
message about having created a service.

@example
(with-current-buffer
 (url-retrieve-synchronously wsdl-url)
 (buffer-string))
@end example

@noindent
When this works, it will show a bunch of WSDL (XML) in *Messages*.

@noindent
Debug the above URL retrievals with @code{M-:} in an @code{emacs -Q}
run:

@example
(progn
  (setq url-debug 1)
  (url-retrieve-synchronously URL-STRING)
  (dolist (p (seq-filter
              (lambda (b) (string-match " *http*" (buffer-name b)))
              (buffer-list)))
    (message "HTTP result buffer: \"%s\"\n%s"
             (buffer-name p)
             (with-current-buffer p (buffer-string))))
  "check *Messages*")
@end example

@noindent
Beware that HTTP responses can be out-of-order, and that if you set
@code{url-debug} to a number or @code{t}, Emacs may hang for a while if
it attempts to print a very large data structure.

@noindent
Once you're sure the above steps are working, try @code{M-x
excorporate}.

@noindent
The buffer @code{*fsm-debug*} shows @code{excorporate} state
transitions and should provide details of where things went wrong.

@noindent
Also check @code{*Messages*} for anything obvious.

@noindent
If you suspect something wrong with accessing the EWS URL, try setting
@code{url-debug} to t and retry @code{M-x excorporate}, then check the
@code{*URL-DEBUG*} buffer for output.

@noindent
If you suspect NTLM authentication is failing, as a long shot, you
might try setting @code{ntlm-compatibility-level} to 0 and retrying
@code{M-x excorporate}.

@noindent
Excorporate's dependencies implement the tricky elements of
asynchronous Exchange access: a state machine (@code{fsm}), TLS
negotiation (@code{gnutls}), NTLM authentication (@code{ntlm} and
@code{url-http-ntlm}) and SOAP communication (@code{soap-client}).

@node API Usage
@chapter API Usage

@noindent
Here are some examples of using the API (application programming
interface) provided by Excorporate.

@noindent
Not all of Excorporate's functionality is exposed as interactive
functions.  Here is an example of creating a meeting to which
hacker2@@gnu.org is invited, using a non-interactive function provided by
Excorporate:

@example
@group
(exco-calendar-item-meeting-create
 (car exco--connection-identifiers)
 "Test meeting 1"
 "Hi,\n\nThis is a test meeting 1.\n\nRegards.\n"
 (encode-time 0 15 14 23 09 2020)
 (encode-time 0 0  15 23 09 2020)
 "Online only"
 '("hacker2@@gnu.org") nil
 (lambda (identifier response)
   (message "%S: %S" identifier response)))
@result{} ("hacker1@@gnu.org" . "https://mail.gnu.org/EWS/Exchange.asmx"): (((ResponseMessages (CreateItemResponseMessage (ResponseClass . "Success") (ResponseCode . "NoError") (Items (CalendarItem (ItemId (Id . "A[...]A==") (ChangeKey . "D[...]M"))))))))
@end group
@end example

@noindent
The callback is run asychronously after the server responds, so as not
to block Emacs, and the result is what is printed in the
@code{*Messages*} buffer.  This example assumes the user has already run
@kbd{M-x excorporate} to create a connection.  @code{(car
exco--connection-identifiers)} is a hack that uses the first-established
connection.  Excorporate fully supports connecting to multiple different
servers though (see @code{exco-connection-iterate}) so published code
that uses the Excorporate API should not assume just one connection.

@noindent
There is lots of server-side functionality that Excorporate does not
provide high-level non-interactive functions for.  Using that
functionality is still possible with the low-level @code{exco-operate}
and @code{exco-operate-synchronously} functions.

@noindent
For example, evaluating this form produces lots of details about the
meeting represented by the ItemId form, including tidbits like the list
of invitees and how they've responded (accepted, declined, tentatively
accepted, unknown).  You can find ItemId forms to experiment with in the
PROPERTIES drawer of calendar entries in the interactive Org buffer.

@example
@group
(exco-operate-synchronously
  (car exco--connection-identifiers)
  "GetItem"
  '(((ItemShape (BaseShape . "AllProperties"))
     (ItemIds (ItemId (Id . "A[...]A==") (ChangeKey . "D[...]d"))))
    nil nil nil nil nil nil))
@result{} (((ResponseMessages (GetItemResponseMessage (ResponseClass . "Success") (ResponseCode . "NoError") (Items (CalendarItem ...))))))
@end group
@end example

@noindent
Note that this function is synchronous.  This is nice for experimenting
with, for example, in an IELM REPL, but published code should mostly use
the asynchronous calls to avoid blocking Emacs during server operations.

@noindent
Here is a more complicated example that asynchronously queries the
server for availability overlap for hacker1@@gnu.org and hacker2@@gnu.org,
in the Eastern Time Zone.

@example
@group
(exco-operate
 (car exco--connection-identifiers)
 "GetUserAvailability"
 '(((TimeZone
     (Bias . 300)
     (StandardTime
      (Bias . 0)
      (Time . "02:00:00")
      (DayOrder . 1)
      (Month . 11)
      (DayOfWeek . "Sunday"))
     (DaylightTime
      (Bias . -60)
      (Time . "02:00:00")
      (DayOrder . 2)
      (Month . 3)
      (DayOfWeek . "Sunday")))
    (MailboxDataArray
     (MailboxData
      (Email
       (Address . "hacker1@@gnu.org"))
      (AttendeeType . "Required")
      (ExcludeConflicts . nil))
     (MailboxData
      (Email
       (Address . "hacker2@@gnu.org"))
      (AttendeeType . "Required")
      (ExcludeConflicts . nil)))
    (FreeBusyViewOptions
     (TimeWindow
      (StartTime . "2020-09-25T00:00:00Z")
      (EndTime . "2020-09-25T23:59:00Z"))
     (MergedFreeBusyIntervalInMinutes . 60)
     (RequestedView "DetailedMerged")))
   nil nil nil)
 (lambda (identifier response)
   (message "%S: %S" identifier response)))
@result{} ("hacker1@@gnu.org" . "https://mail.gnu.org/EWS/Exchange.asmx"): (((FreeBusyResponseArray (FreeBusyResponse ... ) ...)))
@end group
@end example

@noindent
Feel free to submit new functions in excorporate.el and the backends
that you think others would find useful.  Functions in excorporate.el
have always kept/must always keep the same interface so that they stay
backward compatible.

@bye
