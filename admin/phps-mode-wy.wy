;;; phps.wy --- Semantic LALR grammar for PHP -*- lexical-binding: t -*-

;; Copyright (C) 2018-2020  Free Software Foundation, Inc.

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or (at
;; your option) any later version.

;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.


;;; Commentary:

;; Run `(wisent-make-parsers)' or "C-c C-c" to generate grammar-file in Emacs Lisp.
;;
;; To debug (setq wisent-verbose-flag t) and check buffer *wisent-log*
;;
;; Based on the Zend PHP Parser YACC https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y

;; Create macros for all macros uses in original YACC, base macro structure on semantic-php-wy-macro.el

;; Don't edit phps.wy because it's generated by phps-automation.el and phps-automation-header.wy

;; Check semantic/wisent/grammar.el for macro definitions


;;; Code:

%package phps-mode
%provide phps-mode-wy

%languagemode phps-mode

%{
  (setq max-specpdl-size 160000)
}

%use-macros phps-mode-wy-macros {
             phps-mode-wy-macros--zend_add_class_modifier
             phps-mode-wy-macros--zend_add_member_modifier
             phps-mode-wy-macros--zend_append_str
             phps-mode-wy-macros--zend_ast_create
             phps-mode-wy-macros--zend_ast_create_assign_op
             phps-mode-wy-macros--zend_ast_create_binary_op
             phps-mode-wy-macros--zend_ast_create_cast
             phps-mode-wy-macros--zend_ast_create_decl
             phps-mode-wy-macros--zend_ast_create_ex
             phps-mode-wy-macros--zend_ast_create_list
             phps-mode-wy-macros--zend_ast_create_zval_from_str
             phps-mode-wy-macros--zend_ast_get_str
             phps-mode-wy-macros--zend_ast_list_add
             phps-mode-wy-macros--zend_ast_list_rtrim
             phps-mode-wy-macros--zend_handle_encoding_declaration
             phps-mode-wy-macros--zend_negate_num_string
}

%precedence T_THROW
%precedence PREC_ARROW_FUNCTION
%precedence T_INCLUDE T_INCLUDE_ONCE T_REQUIRE T_REQUIRE_ONCE
%left T_LOGICAL_OR
%left T_LOGICAL_XOR
%left T_LOGICAL_AND
%precedence T_PRINT
%precedence T_YIELD
%precedence T_DOUBLE_ARROW
%precedence T_YIELD_FROM
%precedence '=' T_PLUS_EQUAL T_MINUS_EQUAL T_MUL_EQUAL T_DIV_EQUAL T_CONCAT_EQUAL T_MOD_EQUAL T_AND_EQUAL T_OR_EQUAL T_XOR_EQUAL T_SL_EQUAL T_SR_EQUAL T_POW_EQUAL T_COALESCE_EQUAL
%left '?' ':'
%right T_COALESCE
%left T_BOOLEAN_OR
%left T_BOOLEAN_AND
%left '|'
%left '^'
%left '&'
%nonassoc T_IS_EQUAL T_IS_NOT_EQUAL T_IS_IDENTICAL T_IS_NOT_IDENTICAL T_SPACESHIP
%nonassoc '<' T_IS_SMALLER_OR_EQUAL '>' T_IS_GREATER_OR_EQUAL
%left '.'
%left T_SL T_SR
%left '+' '-'
%left '*' '/' '%'
%precedence '!'
%precedence T_INSTANCEOF
%precedence '~' T_INT_CAST T_DOUBLE_CAST T_STRING_CAST T_ARRAY_CAST T_OBJECT_CAST T_BOOL_CAST T_UNSET_CAST '@'
%right T_POW
%precedence T_CLONE

;; Resolve danging else conflict
%precedence T_NOELSE
%precedence T_ELSEIF
%precedence T_ELSE

%token <ast> T_LNUMBER   "integer number (T_LNUMBER)"
%token <ast> T_DNUMBER   "floating-point number (T_DNUMBER)"
%token <ast> T_STRING    "identifier (T_STRING)"
%token <ast> T_VARIABLE  "variable (T_VARIABLE)"
%token <ast> T_INLINE_HTML
%token <ast> T_ENCAPSED_AND_WHITESPACE  "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
%token <ast> T_CONSTANT_ENCAPSED_STRING "quoted-string (T_CONSTANT_ENCAPSED_STRING)"
%token <ast> T_STRING_VARNAME "variable name (T_STRING_VARNAME)"
%token <ast> T_NUM_STRING "number (T_NUM_STRING)"

%token END 0 "end of file"
%token T_INCLUDE      "include (T_INCLUDE)"
%token T_INCLUDE_ONCE "include_once (T_INCLUDE_ONCE)"
%token T_EVAL         "eval (T_EVAL)"
%token T_REQUIRE      "require (T_REQUIRE)"
%token T_REQUIRE_ONCE "require_once (T_REQUIRE_ONCE)"
%token T_LOGICAL_OR   "or (T_LOGICAL_OR)"
%token T_LOGICAL_XOR  "xor (T_LOGICAL_XOR)"
%token T_LOGICAL_AND  "and (T_LOGICAL_AND)"
%token T_PRINT        "print (T_PRINT)"
%token T_YIELD        "yield (T_YIELD)"
%token T_YIELD_FROM   "yield from (T_YIELD_FROM)"
%token T_PLUS_EQUAL   "+= (T_PLUS_EQUAL)"
%token T_MINUS_EQUAL  "-= (T_MINUS_EQUAL)"
%token T_MUL_EQUAL    "*= (T_MUL_EQUAL)"
%token T_DIV_EQUAL    "/= (T_DIV_EQUAL)"
%token T_CONCAT_EQUAL ".= (T_CONCAT_EQUAL)"
%token T_MOD_EQUAL    "%= (T_MOD_EQUAL)"
%token T_AND_EQUAL    "&= (T_AND_EQUAL)"
%token T_OR_EQUAL     "|= (T_OR_EQUAL)"
%token T_XOR_EQUAL    "^= (T_XOR_EQUAL)"
%token T_SL_EQUAL     "<<= (T_SL_EQUAL)"
%token T_SR_EQUAL     ">>= (T_SR_EQUAL)"
%token T_COALESCE_EQUAL "??= (T_COALESCE_EQUAL)"
%token T_BOOLEAN_OR   "|| (T_BOOLEAN_OR)"
%token T_BOOLEAN_AND  "&& (T_BOOLEAN_AND)"
%token T_IS_EQUAL     "== (T_IS_EQUAL)"
%token T_IS_NOT_EQUAL "!= (T_IS_NOT_EQUAL)"
%token T_IS_IDENTICAL "=== (T_IS_IDENTICAL)"
%token T_IS_NOT_IDENTICAL "!== (T_IS_NOT_IDENTICAL)"
%token T_IS_SMALLER_OR_EQUAL "<= (T_IS_SMALLER_OR_EQUAL)"
%token T_IS_GREATER_OR_EQUAL ">= (T_IS_GREATER_OR_EQUAL)"
%token T_SPACESHIP "<=> (T_SPACESHIP)"
%token T_SL "<< (T_SL)"
%token T_SR ">> (T_SR)"
%token T_INSTANCEOF  "instanceof (T_INSTANCEOF)"
%token T_INC "++ (T_INC)"
%token T_DEC "-- (T_DEC)"
%token T_INT_CAST    "(int) (T_INT_CAST)"
%token T_DOUBLE_CAST "(double) (T_DOUBLE_CAST)"
%token T_STRING_CAST "(string) (T_STRING_CAST)"
%token T_ARRAY_CAST  "(array) (T_ARRAY_CAST)"
%token T_OBJECT_CAST "(object) (T_OBJECT_CAST)"
%token T_BOOL_CAST   "(bool) (T_BOOL_CAST)"
%token T_UNSET_CAST  "(unset) (T_UNSET_CAST)"
%token T_NEW       "new (T_NEW)"
%token T_CLONE     "clone (T_CLONE)"
%token T_EXIT      "exit (T_EXIT)"
%token T_IF        "if (T_IF)"
%token T_ELSEIF    "elseif (T_ELSEIF)"
%token T_ELSE      "else (T_ELSE)"
%token T_ENDIF     "endif (T_ENDIF)"
%token T_ECHO       "echo (T_ECHO)"
%token T_DO         "do (T_DO)"
%token T_WHILE      "while (T_WHILE)"
%token T_ENDWHILE   "endwhile (T_ENDWHILE)"
%token T_FOR        "for (T_FOR)"
%token T_ENDFOR     "endfor (T_ENDFOR)"
%token T_FOREACH    "foreach (T_FOREACH)"
%token T_ENDFOREACH "endforeach (T_ENDFOREACH)"
%token T_DECLARE    "declare (T_DECLARE)"
%token T_ENDDECLARE "enddeclare (T_ENDDECLARE)"
%token T_AS         "as (T_AS)"
%token T_SWITCH     "switch (T_SWITCH)"
%token T_ENDSWITCH  "endswitch (T_ENDSWITCH)"
%token T_CASE       "case (T_CASE)"
%token T_DEFAULT    "default (T_DEFAULT)"
%token T_BREAK      "break (T_BREAK)"
%token T_CONTINUE   "continue (T_CONTINUE)"
%token T_GOTO       "goto (T_GOTO)"
%token T_FUNCTION   "function (T_FUNCTION)"
%token T_FN         "fn (T_FN)"
%token T_CONST      "const (T_CONST)"
%token T_RETURN     "return (T_RETURN)"
%token T_TRY        "try (T_TRY)"
%token T_CATCH      "catch (T_CATCH)"
%token T_FINALLY    "finally (T_FINALLY)"
%token T_THROW      "throw (T_THROW)"
%token T_USE        "use (T_USE)"
%token T_INSTEADOF  "insteadof (T_INSTEADOF)"
%token T_GLOBAL     "global (T_GLOBAL)"
%token T_STATIC     "static (T_STATIC)"
%token T_ABSTRACT   "abstract (T_ABSTRACT)"
%token T_FINAL      "final (T_FINAL)"
%token T_PRIVATE    "private (T_PRIVATE)"
%token T_PROTECTED  "protected (T_PROTECTED)"
%token T_PUBLIC     "public (T_PUBLIC)"
%token T_VAR        "var (T_VAR)"
%token T_UNSET      "unset (T_UNSET)"
%token T_ISSET      "isset (T_ISSET)"
%token T_EMPTY      "empty (T_EMPTY)"
%token T_HALT_COMPILER "__halt_compiler (T_HALT_COMPILER)"
%token T_CLASS      "class (T_CLASS)"
%token T_TRAIT      "trait (T_TRAIT)"
%token T_INTERFACE  "interface (T_INTERFACE)"
%token T_EXTENDS    "extends (T_EXTENDS)"
%token T_IMPLEMENTS "implements (T_IMPLEMENTS)"
%token T_OBJECT_OPERATOR "-> (T_OBJECT_OPERATOR)"
%token T_DOUBLE_ARROW    "=> (T_DOUBLE_ARROW)"
%token T_LIST            "list (T_LIST)"
%token T_ARRAY           "array (T_ARRAY)"
%token T_CALLABLE        "callable (T_CALLABLE)"
%token T_LINE            "__LINE__ (T_LINE)"
%token T_FILE            "__FILE__ (T_FILE)"
%token T_DIR             "__DIR__ (T_DIR)"
%token T_CLASS_C         "__CLASS__ (T_CLASS_C)"
%token T_TRAIT_C         "__TRAIT__ (T_TRAIT_C)"
%token T_METHOD_C        "__METHOD__ (T_METHOD_C)"
%token T_FUNC_C          "__FUNCTION__ (T_FUNC_C)"
%token T_COMMENT         "comment (T_COMMENT)"
%token T_DOC_COMMENT     "doc comment (T_DOC_COMMENT)"
%token T_OPEN_TAG        "open tag (T_OPEN_TAG)"
%token T_OPEN_TAG_WITH_ECHO "open tag with echo (T_OPEN_TAG_WITH_ECHO)"
%token T_CLOSE_TAG       "close tag (T_CLOSE_TAG)"
%token T_WHITESPACE      "whitespace (T_WHITESPACE)"
%token T_START_HEREDOC   "heredoc start (T_START_HEREDOC)"
%token T_END_HEREDOC     "heredoc end (T_END_HEREDOC)"
%token T_DOLLAR_OPEN_CURLY_BRACES "${ (T_DOLLAR_OPEN_CURLY_BRACES)"
%token T_CURLY_OPEN      "{$ (T_CURLY_OPEN)"
%token T_PAAMAYIM_NEKUDOTAYIM ":: (T_PAAMAYIM_NEKUDOTAYIM)"
%token T_NAMESPACE       "namespace (T_NAMESPACE)"
%token T_NS_C            "__NAMESPACE__ (T_NS_C)"
%token T_NS_SEPARATOR    "\\ (T_NS_SEPARATOR)"
%token T_ELLIPSIS        "... (T_ELLIPSIS)"
%token T_COALESCE        "?? (T_COALESCE)"
%token T_POW             "** (T_POW)"
%token T_POW_EQUAL       "**= (T_POW_EQUAL)"
%token T_BAD_CHARACTER   "invalid character (T_BAD_CHARACTER)"

;; Token used to force a parse error from the lexer
%token T_ERROR

%type <ast> top_statement namespace_name name statement function_declaration_statement
%type <ast> class_declaration_statement trait_declaration_statement
%type <ast> interface_declaration_statement interface_extends_list
%type <ast> group_use_declaration inline_use_declarations inline_use_declaration
%type <ast> mixed_group_use_declaration use_declaration unprefixed_use_declaration
%type <ast> unprefixed_use_declarations const_decl inner_statement
%type <ast> expr optional_expr while_statement for_statement foreach_variable
%type <ast> foreach_statement declare_statement finally_statement unset_variable variable
%type <ast> extends_from parameter optional_type_without_static argument global_var
%type <ast> static_var class_statement trait_adaptation trait_precedence trait_alias
%type <ast> absolute_trait_method_reference trait_method_reference property echo_expr
%type <ast> new_expr anonymous_class class_name class_name_reference simple_variable
%type <ast> internal_functions_in_yacc
%type <ast> exit_expr scalar backticks_expr lexical_var function_call member_name property_name
%type <ast> variable_class_name dereferencable_scalar constant class_constant
%type <ast> fully_dereferencable array_object_dereferencable
%type <ast> callable_expr callable_variable static_member new_variable
%type <ast> encaps_var encaps_var_offset isset_variables
%type <ast> top_statement_list use_declarations const_list inner_statement_list if_stmt
%type <ast> alt_if_stmt for_exprs switch_case_list global_var_list static_var_list
%type <ast> echo_expr_list unset_variables catch_name_list catch_list optional_variable parameter_list class_statement_list
%type <ast> implements_list case_list if_stmt_without_else
%type <ast> non_empty_parameter_list argument_list non_empty_argument_list property_list
%type <ast> class_const_list class_const_decl class_name_list trait_adaptations method_body non_empty_for_exprs
%type <ast> ctor_arguments alt_if_stmt_without_else trait_adaptation_list lexical_vars
%type <ast> lexical_var_list encaps_list
%type <ast> array_pair non_empty_array_pair_list array_pair_list possible_array_pair
%type <ast> isset_variable type return_type type_expr type_without_static
%type <ast> identifier type_expr_without_static union_type_without_static
%type <ast> inline_function union_type

%type <num> returns_ref function fn is_reference is_variadic variable_modifiers
%type <num> method_modifiers non_empty_member_modifiers member_modifier
%type <num> class_modifiers class_modifier use_type backup_fn_flags

%type <ptr> backup_lex_pos
%type <str> backup_doc_comment

%start start

;; NOTE Generated grammar starts here


start:
    top_statement_list (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(phps-mode-parser--cg 'phps-mode-parser--ast parameter-1) return-item))
    ;

reserved_non_modifiers:
    T_INCLUDE
    | T_INCLUDE_ONCE
    | T_EVAL
    | T_REQUIRE
    | T_REQUIRE_ONCE
    | T_LOGICAL_OR
    | T_LOGICAL_XOR
    | T_LOGICAL_AND
    | T_INSTANCEOF
    | T_NEW
    | T_CLONE
    | T_EXIT
    | T_IF
    | T_ELSEIF
    | T_ELSE
    | T_ENDIF
    | T_ECHO
    | T_DO
    | T_WHILE
    | T_ENDWHILE
    | T_FOR
    | T_ENDFOR
    | T_FOREACH
    | T_ENDFOREACH
    | T_DECLARE
    | T_ENDDECLARE
    | T_AS
    | T_TRY
    | T_CATCH
    | T_FINALLY
    | T_THROW
    | T_USE
    | T_INSTEADOF
    | T_GLOBAL
    | T_VAR
    | T_UNSET
    | T_ISSET
    | T_EMPTY
    | T_CONTINUE
    | T_GOTO
    | T_FUNCTION
    | T_CONST
    | T_RETURN
    | T_PRINT
    | T_YIELD
    | T_LIST
    | T_SWITCH
    | T_ENDSWITCH
    | T_CASE
    | T_DEFAULT
    | T_BREAK
    | T_ARRAY
    | T_CALLABLE
    | T_EXTENDS
    | T_IMPLEMENTS
    | T_NAMESPACE
    | T_TRAIT
    | T_INTERFACE
    | T_CLASS
    | T_CLASS_C
    | T_TRAIT_C
    | T_FUNC_C
    | T_METHOD_C
    | T_LINE
    | T_FILE
    | T_DIR
    | T_NS_C
    | T_FN
    ;

semi_reserved:
    reserved_non_modifiers
    | T_STATIC
    | T_ABSTRACT
    | T_FINAL
    | T_PRIVATE
    | T_PROTECTED
    | T_PUBLIC
    ;

identifier:
    T_STRING (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | semi_reserved (progn (let ((return-item '(value $$))(zv nil))(phps-mode-parser--zend_lex_tstring (lambda(return) (setq zv return)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_zval zv)) return-item))
    ;

top_statement_list:
    top_statement_list top_statement (progn (let ((parameter-2 '(value $2))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-2)) return-item))
    | empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 0 'phps-mode-parser--zend_ast_stmt_list)) return-item))
    ;

namespace_name:
    T_STRING (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | namespace_name T_NS_SEPARATOR T_STRING (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_append_str parameter-1 parameter-3)) return-item))
    ;

name:
    namespace_name (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1)(plist-put return-string 'attr 'phps-mode-parser--zend_name_not_fq) return-item))
    | T_NAMESPACE T_NS_SEPARATOR namespace_name (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3)(plist-put return-string 'attr 'phps-mode-parser--zend_name_relative) return-item))
    | T_NS_SEPARATOR namespace_name (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2)(plist-put return-string 'attr 'phps-mode-parser--zend_name_fq) return-item))
    ;

top_statement:
    statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | function_declaration_statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | class_declaration_statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | trait_declaration_statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | interface_declaration_statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_HALT_COMPILER '(' ')' ';' (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_halt_compiler (phps-mode-parser--zend_ast_create_zval_from_long (phps-mode-parser--zend_get_scanned_file_offset))))(phps-mode-parser--zend_stop_lexing) return-item))
    | T_NAMESPACE namespace_name ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_namespace parameter-2 nil))(phps-mode-parser--reset_doc_comment) return-item))
    | T_NAMESPACE namespace_name (progn (let ((return-item '(value $$)))(phps-mode-parser--reset_doc_comment) return-item)) '{' top_statement_list '}' (progn (let ((parameter-5 '(value $5))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_namespace parameter-2 parameter-5)) return-item))
    | T_NAMESPACE (progn (let ((return-item '(value $$)))(phps-mode-parser--reset_doc_comment) return-item)) '{' top_statement_list '}' (progn (let ((parameter-4 '(value $4))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_namespace nil parameter-4)) return-item))
    | T_USE mixed_group_use_declaration ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | T_USE use_type group_use_declaration ';' (progn (let ((parameter-2 '(value $2))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3)(plist-put return-string 'attr parameter-2) return-item))
    | T_USE use_declarations ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2)(plist-put return-string 'attr 'phps-mode-parser--zend_symbol_class) return-item))
    | T_USE use_type use_declarations ';' (progn (let ((parameter-2 '(value $2))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3)(plist-put return-string 'attr parameter-2) return-item))
    | T_CONST const_list ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

use_type:
    T_FUNCTION (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_symbol_function) return-item))
    | T_CONST (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_symbol_const) return-item))
    ;

group_use_declaration:
    namespace_name T_NS_SEPARATOR '{' unprefixed_use_declarations possible_comma '}' (progn (let ((parameter-4 '(value $4))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_group_use parameter-1 parameter-4)) return-item))
    | T_NS_SEPARATOR namespace_name T_NS_SEPARATOR '{' unprefixed_use_declarations possible_comma '}' (progn (let ((parameter-5 '(value $5))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_group_use parameter-2 parameter-5)) return-item))
    ;

mixed_group_use_declaration:
    namespace_name T_NS_SEPARATOR '{' inline_use_declarations possible_comma '}' (progn (let ((parameter-4 '(value $4))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_group_use parameter-1 parameter-4)) return-item))
    | T_NS_SEPARATOR namespace_name T_NS_SEPARATOR '{' inline_use_declarations possible_comma '}' (progn (let ((parameter-5 '(value $5))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_group_use parameter-2 parameter-5)) return-item))
    ;

possible_comma:
    empty
    | ','
    ;

inline_use_declarations:
    inline_use_declarations ',' inline_use_declaration (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | inline_use_declaration (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_use parameter-1)) return-item))
    ;

unprefixed_use_declarations:
    unprefixed_use_declarations ',' unprefixed_use_declaration (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | unprefixed_use_declaration (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_use parameter-1)) return-item))
    ;

use_declarations:
    use_declarations ',' use_declaration (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | use_declaration (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_use parameter-1)) return-item))
    ;

inline_use_declaration:
    unprefixed_use_declaration (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1)(plist-put return-string 'attr 'phps-mode-parser--zend_symbol_class) return-item))
    | use_type unprefixed_use_declaration (progn (let ((parameter-1 '(value $1))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2)(plist-put return-string 'attr parameter-1) return-item))
    ;

unprefixed_use_declaration:
    namespace_name (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_use_elem parameter-1 nil)) return-item))
    | namespace_name T_AS T_STRING (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_use_elem parameter-1 parameter-3)) return-item))
    ;

use_declaration:
    unprefixed_use_declaration (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_NS_SEPARATOR unprefixed_use_declaration (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

const_list:
    const_list ',' const_decl (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | const_decl (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_const_decl parameter-1)) return-item))
    ;

inner_statement_list:
    inner_statement_list inner_statement (progn (let ((parameter-2 '(value $2))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-2)) return-item))
    | empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 0 'phps-mode-parser--zend_ast_stmt_list)) return-item))
    ;

inner_statement:
    statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | function_declaration_statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | class_declaration_statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | trait_declaration_statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | interface_declaration_statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_HALT_COMPILER '(' ')' ';' (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil)(phps-mode-parser--zend_throw_exception phps-mode-parser--zend_ce_compile_error "__HALT_COMPILER() can only be used from the outermost scope" 0)(setq return-item 'phps-mode-parser--yyerror) return-item))
    ;

statement:
    '{' inner_statement_list '}' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | if_stmt (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | alt_if_stmt (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_WHILE '(' expr ')' while_statement (progn (let ((parameter-5 '(value $5))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_while parameter-3 parameter-5)) return-item))
    | T_DO statement T_WHILE '(' expr ')' ';' (progn (let ((parameter-5 '(value $5))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_do_while parameter-2 parameter-5)) return-item))
    | T_FOR '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement (progn (let ((parameter-9 '(value $9))(parameter-7 '(value $7))(parameter-5 '(value $5))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_for parameter-3 parameter-5 parameter-7 parameter-9)) return-item))
    | T_SWITCH '(' expr ')' switch_case_list (progn (let ((parameter-5 '(value $5))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_switch parameter-3 parameter-5)) return-item))
    | T_BREAK optional_expr ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_break parameter-2)) return-item))
    | T_CONTINUE optional_expr ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_continue parameter-2)) return-item))
    | T_RETURN optional_expr ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_return parameter-2)) return-item))
    | T_GLOBAL global_var_list ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | T_STATIC static_var_list ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | T_ECHO echo_expr_list ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | T_INLINE_HTML (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_echo parameter-1)) return-item))
    | expr ';' (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_UNSET '(' unset_variables possible_comma ')' ';' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3) return-item))
    | T_FOREACH '(' expr T_AS foreach_variable ')' foreach_statement (progn (let ((parameter-7 '(value $7))(parameter-5 '(value $5))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_foreach parameter-3 parameter-5 nil parameter-7)) return-item))
    | T_FOREACH '(' expr T_AS foreach_variable T_DOUBLE_ARROW foreach_variable ')' foreach_statement (progn (let ((parameter-9 '(value $9))(parameter-5 '(value $5))(parameter-7 '(value $7))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_foreach parameter-3 parameter-7 parameter-5 parameter-9)) return-item))
    | T_DECLARE '(' const_list ')' (progn  (if (!zend_handle_encoding_declaration($3))(let ((return-item '(value $$)))(setq return-item 'phps-mode-parser--yyerror) return-item))(let ((return-item '(value $$))) return-item)) declare_statement (progn (let ((parameter-6 '(value $6))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_declare parameter-3 parameter-6)) return-item))
    | ';' ;; empty statement
    (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | T_TRY '{' inner_statement_list '}' catch_list finally_statement (progn (let ((parameter-6 '(value $6))(parameter-5 '(value $5))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_try parameter-3 parameter-5 parameter-6)) return-item))
    | T_GOTO T_STRING ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_goto parameter-2)) return-item))
    | T_STRING ':' (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_label parameter-1)) return-item))
    ;

catch_list:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 0 'phps-mode-parser--zend_ast_catch_list)) return-item))
    | catch_list T_CATCH '(' catch_name_list optional_variable ')' '{' inner_statement_list '}' (progn (let ((parameter-8 '(value $8))(parameter-5 '(value $5))(parameter-4 '(value $4))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_catch parameter-4 parameter-5 parameter-8))) return-item))
    ;

catch_name_list:
    class_name (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_name_list parameter-1)) return-item))
    | catch_name_list '|' class_name (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    ;

optional_variable:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | T_VARIABLE (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

finally_statement:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | T_FINALLY '{' inner_statement_list '}' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3) return-item))
    ;

unset_variables:
    unset_variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_stmt_list parameter-1)) return-item))
    | unset_variables ',' unset_variable (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    ;

unset_variable:
    variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_unset parameter-1)) return-item))
    ;

function_declaration_statement:
    function returns_ref T_STRING backup_doc_comment '(' parameter_list ')' return_type backup_fn_flags '{' inner_statement_list '}' backup_fn_flags (progn (let ((parameter-9 '(value $9))(parameter-8 '(value $8))(parameter-11 '(value $11))(parameter-6 '(value $6))(parameter-3 '(value $3))(parameter-4 '(value $4))(parameter-1 '(value $1))(parameter-13 '(value $13))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_decl 'phps-mode-parser--zend_ast_func_decl (logior parameter-2 parameter-13) parameter-1 parameter-4 (phps-mode-parser--zend_ast_get_str parameter-3) parameter-6 nil parameter-11 parameter-8))(phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags parameter-9) return-item))
    ;

is_reference:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value 0) return-item))
    | '&' (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_param_ref) return-item))
    ;

is_variadic:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value 0) return-item))
    | T_ELLIPSIS (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_param_variadic) return-item))
    ;

class_declaration_statement:
    class_modifiers T_CLASS (progn (let ((return-item '(value $$))) return-item)) T_STRING extends_from implements_list backup_doc_comment '{' class_statement_list '}' (progn (let ((parameter-9 '(value $9))(parameter-6 '(value $6))(parameter-5 '(value $5))(parameter-4 '(value $4))(parameter-7 '(value $7))(parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_decl 'phps-mode-parser--zend_ast_class parameter-1 parameter-3 parameter-7 (phps-mode-parser--zend_ast_get_str parameter-4) parameter-5 parameter-6 parameter-9 nil)) return-item))
    | T_CLASS (progn (let ((return-item '(value $$))) return-item)) T_STRING extends_from implements_list backup_doc_comment '{' class_statement_list '}' (progn (let ((parameter-8 '(value $8))(parameter-5 '(value $5))(parameter-4 '(value $4))(parameter-3 '(value $3))(parameter-6 '(value $6))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_decl 'phps-mode-parser--zend_ast_class 0 parameter-2 parameter-6 (phps-mode-parser--zend_ast_get_str parameter-3) parameter-4 parameter-5 parameter-8 nil)) return-item))
    ;

class_modifiers:
    class_modifier (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | class_modifiers class_modifier (progn  ($$ = zend_add_class_modifier($1, $2); if (!$$)(let ((return-item '(value $$)))(setq return-item 'phps-mode-parser--yyerror) return-item))(let ((return-item '(value $$))) return-item))
    ;

class_modifier:
    T_ABSTRACT (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_explicit_abstract_class) return-item))
    | T_FINAL (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_final) return-item))
    ;

trait_declaration_statement:
    T_TRAIT (progn (let ((return-item '(value $$))) return-item)) T_STRING backup_doc_comment '{' class_statement_list '}' (progn (let ((parameter-6 '(value $6))(parameter-3 '(value $3))(parameter-4 '(value $4))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_decl 'phps-mode-parser--zend_ast_class 'phps-mode-parser--zend_acc_trait parameter-2 parameter-4 (phps-mode-parser--zend_ast_get_str parameter-3) nil nil parameter-6 nil)) return-item))
    ;

interface_declaration_statement:
    T_INTERFACE (progn (let ((return-item '(value $$))) return-item)) T_STRING interface_extends_list backup_doc_comment '{' class_statement_list '}' (progn (let ((parameter-7 '(value $7))(parameter-4 '(value $4))(parameter-3 '(value $3))(parameter-5 '(value $5))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_decl 'phps-mode-parser--zend_ast_class 'phps-mode-parser--zend_acc_interface parameter-2 parameter-5 (phps-mode-parser--zend_ast_get_str parameter-3) nil parameter-4 parameter-7 nil)) return-item))
    ;

extends_from:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | T_EXTENDS class_name (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

interface_extends_list:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | T_EXTENDS class_name_list (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

implements_list:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | T_IMPLEMENTS class_name_list (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

foreach_variable:
    variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '&' variable (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_ref parameter-2)) return-item))
    | T_LIST '(' array_pair_list ')' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3)(plist-put return-string 'attr 'phps-mode-parser--zend_array_syntax_list) return-item))
    | '[' array_pair_list ']' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2)(plist-put return-string 'attr 'phps-mode-parser--zend_array_syntax_short) return-item))
    ;

for_statement:
    statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | ':' inner_statement_list T_ENDFOR ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

foreach_statement:
    statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | ':' inner_statement_list T_ENDFOREACH ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

declare_statement:
    statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | ':' inner_statement_list T_ENDDECLARE ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

switch_case_list:
    '{' case_list '}' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | '{' ';' case_list '}' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3) return-item))
    | ':' case_list T_ENDSWITCH ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | ':' ';' case_list T_ENDSWITCH ';' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3) return-item))
    ;

case_list:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 0 'phps-mode-parser--zend_ast_switch_list)) return-item))
    | case_list T_CASE expr case_separator inner_statement_list (progn (let ((parameter-5 '(value $5))(parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_switch_case parameter-3 parameter-5))) return-item))
    | case_list T_DEFAULT case_separator inner_statement_list (progn (let ((parameter-4 '(value $4))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_switch_case nil parameter-4))) return-item))
    ;

case_separator:
    ':'
    | ';'
    ;

while_statement:
    statement (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | ':' inner_statement_list T_ENDWHILE ';' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

if_stmt_without_else:
    T_IF '(' expr ')' statement (progn (let ((parameter-5 '(value $5))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_if (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_if_elem parameter-3 parameter-5))) return-item))
    | if_stmt_without_else T_ELSEIF '(' expr ')' statement (progn (let ((parameter-6 '(value $6))(parameter-4 '(value $4))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_if_elem parameter-4 parameter-6))) return-item))
    ;

if_stmt:
    if_stmt_without_else prec T_NOELSE (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | if_stmt_without_else T_ELSE statement (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_if_elem nil parameter-3))) return-item))
    ;

alt_if_stmt_without_else:
    T_IF '(' expr ')' ':' inner_statement_list (progn (let ((parameter-6 '(value $6))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_if (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_if_elem parameter-3 parameter-6))) return-item))
    | alt_if_stmt_without_else T_ELSEIF '(' expr ')' ':' inner_statement_list (progn (let ((parameter-7 '(value $7))(parameter-4 '(value $4))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_if_elem parameter-4 parameter-7))) return-item))
    ;

alt_if_stmt:
    alt_if_stmt_without_else T_ENDIF ';' (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | alt_if_stmt_without_else T_ELSE ':' inner_statement_list T_ENDIF ';' (progn (let ((parameter-4 '(value $4))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_if_elem nil parameter-4))) return-item))
    ;

parameter_list:
    non_empty_parameter_list possible_comma (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 0 'phps-mode-parser--zend_ast_param_list)) return-item))
    ;

non_empty_parameter_list:
    parameter (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_param_list parameter-1)) return-item))
    | non_empty_parameter_list ',' parameter (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    ;

parameter:
    optional_type_without_static is_reference is_variadic T_VARIABLE (progn (let ((parameter-4 '(value $4))(parameter-1 '(value $1))(parameter-3 '(value $3))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_param (logior parameter-2 parameter-3) parameter-1 parameter-4 nil)) return-item))
    | optional_type_without_static is_reference is_variadic T_VARIABLE '=' expr (progn (let ((parameter-6 '(value $6))(parameter-4 '(value $4))(parameter-1 '(value $1))(parameter-3 '(value $3))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_param (logior parameter-2 parameter-3) parameter-1 parameter-4 parameter-6)) return-item))
    ;

optional_type_without_static:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | type_expr_without_static (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

type_expr:
    type (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '?' type (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2)(plist-put return-string 'attr (logior (plist-get return-item 'attr) 'phps-mode-parser--zend_type_nullable)) return-item))
    | union_type (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

type:
    type_without_static (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_STATIC (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_type 'phps-mode-parser--is_static)) return-item))
    ;

union_type:
    type '|' type (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 2 'phps-mode-parser--zend_ast_type_union parameter-1 parameter-3)) return-item))
    | union_type '|' type (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    ;

type_expr_without_static:
    type_without_static (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '?' type_without_static (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2)(plist-put return-string 'attr (logior (plist-get return-item 'attr) 'phps-mode-parser--zend_type_nullable)) return-item))
    | union_type_without_static (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

type_without_static:
    T_ARRAY (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_type 'phps-mode-parser--is_array)) return-item))
    | T_CALLABLE (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_type 'phps-mode-parser--is_callable)) return-item))
    | name (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

union_type_without_static:
    type_without_static '|' type_without_static (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 2 'phps-mode-parser--zend_ast_type_union parameter-1 parameter-3)) return-item))
    | union_type_without_static '|' type_without_static (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    ;

return_type:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | ':' type_expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

argument_list:
    '(' ')' (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 0 'phps-mode-parser--zend_ast_arg_list)) return-item))
    | '(' non_empty_argument_list possible_comma ')' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

non_empty_argument_list:
    argument (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_arg_list parameter-1)) return-item))
    | non_empty_argument_list ',' argument (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    ;

argument:
    expr (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_ELLIPSIS expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_unpack parameter-2)) return-item))
    ;

global_var_list:
    global_var_list ',' global_var (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | global_var (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_stmt_list parameter-1)) return-item))
    ;

global_var:
    simple_variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_global (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-1))) return-item))
    ;

static_var_list:
    static_var_list ',' static_var (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | static_var (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_stmt_list parameter-1)) return-item))
    ;

static_var:
    T_VARIABLE (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_static parameter-1 nil)) return-item))
    | T_VARIABLE '=' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_static parameter-1 parameter-3)) return-item))
    ;

class_statement_list:
    class_statement_list class_statement (progn (let ((parameter-2 '(value $2))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-2)) return-item))
    | empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 0 'phps-mode-parser--zend_ast_stmt_list)) return-item))
    ;

class_statement:
    variable_modifiers optional_type_without_static property_list ';' (progn (let ((parameter-1 '(value $1))(parameter-3 '(value $3))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_prop_group parameter-2 parameter-3))(plist-put return-string 'attr parameter-1) return-item))
    | method_modifiers T_CONST class_const_list ';' (progn (let ((parameter-1 '(value $1))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3)(plist-put return-string 'attr parameter-1) return-item))
    | T_USE class_name_list trait_adaptations (progn (let ((parameter-3 '(value $3))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_use_trait parameter-2 parameter-3)) return-item))
    | method_modifiers function returns_ref identifier backup_doc_comment '(' parameter_list ')' return_type backup_fn_flags method_body backup_fn_flags (progn (let ((parameter-10 '(value $10))(parameter-9 '(value $9))(parameter-11 '(value $11))(parameter-7 '(value $7))(parameter-4 '(value $4))(parameter-5 '(value $5))(parameter-2 '(value $2))(parameter-12 '(value $12))(parameter-1 '(value $1))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_decl 'phps-mode-parser--zend_ast_method (logior parameter-3 (logior parameter-1 parameter-12)) parameter-2 parameter-5 (phps-mode-parser--zend_ast_get_str parameter-4) parameter-7 nil parameter-11 parameter-9))(phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags parameter-10) return-item))
    ;

class_name_list:
    class_name (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_name_list parameter-1)) return-item))
    | class_name_list ',' class_name (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    ;

trait_adaptations:
    ';' (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | '{' '}' (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | '{' trait_adaptation_list '}' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

trait_adaptation_list:
    trait_adaptation (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_trait_adaptations parameter-1)) return-item))
    | trait_adaptation_list trait_adaptation (progn (let ((parameter-2 '(value $2))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-2)) return-item))
    ;

trait_adaptation:
    trait_precedence ';' (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | trait_alias ';' (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

trait_precedence:
    absolute_trait_method_reference T_INSTEADOF class_name_list (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_trait_precedence parameter-1 parameter-3)) return-item))
    ;

trait_alias:
    trait_method_reference T_AS T_STRING (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_trait_alias parameter-1 parameter-3)) return-item))
    | trait_method_reference T_AS reserved_non_modifiers (progn (let ((parameter-1 '(value $1))(return-item '(value $$))(zv nil))(phps-mode-parser--zend_lex_tstring (lambda(return) (setq zv return)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_trait_alias parameter-1 (phps-mode-parser--zend_ast_create_zval zv))) return-item))
    | trait_method_reference T_AS member_modifier identifier (progn (let ((parameter-4 '(value $4))(parameter-1 '(value $1))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_trait_alias parameter-3 parameter-1 parameter-4)) return-item))
    | trait_method_reference T_AS member_modifier (progn (let ((parameter-1 '(value $1))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_trait_alias parameter-3 parameter-1 nil)) return-item))
    ;

trait_method_reference:
    identifier (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_method_reference nil parameter-1)) return-item))
    | absolute_trait_method_reference (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

absolute_trait_method_reference:
    class_name T_PAAMAYIM_NEKUDOTAYIM identifier (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_method_reference parameter-1 parameter-3)) return-item))
    ;

method_body:
    ';' ;; abstract method
    (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | '{' inner_statement_list '}' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

variable_modifiers:
    non_empty_member_modifiers (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_VAR (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_public) return-item))
    ;

method_modifiers:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_public) return-item))
    | non_empty_member_modifiers (progn  ($$ = $1; if (!($$ & ZEND_ACC_PPP_MASK))(let ((return-item '(value $$)))(plist-put return-item 'value (logior (plist-get return-item 'value) 'phps-mode-parser--zend_acc_public)) return-item))(let ((return-item '(value $$))) return-item))
    ;

non_empty_member_modifiers:
    member_modifier (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | non_empty_member_modifiers member_modifier (progn  ($$ = zend_add_member_modifier($1, $2); if (!$$)(let ((return-item '(value $$)))(setq return-item 'phps-mode-parser--yyerror) return-item))(let ((return-item '(value $$))) return-item))
    ;

member_modifier:
    T_PUBLIC (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_public) return-item))
    | T_PROTECTED (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_protected) return-item))
    | T_PRIVATE (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_private) return-item))
    | T_STATIC (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_static) return-item))
    | T_ABSTRACT (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_abstract) return-item))
    | T_FINAL (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_final) return-item))
    ;

property_list:
    property_list ',' property (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | property (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_prop_decl parameter-1)) return-item))
    ;

property:
    T_VARIABLE backup_doc_comment (progn (let ((parameter-2 '(value $2))(parameter-2 '(value $2))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_prop_elem parameter-1 nil (if parameter-2 (phps-mode-parser--zend_ast_create_zval_from_str parameter-2) nil))) return-item))
    | T_VARIABLE '=' expr backup_doc_comment (progn (let ((parameter-4 '(value $4))(parameter-4 '(value $4))(parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_prop_elem parameter-1 parameter-3 (if parameter-4 (phps-mode-parser--zend_ast_create_zval_from_str parameter-4) nil))) return-item))
    ;

class_const_list:
    class_const_list ',' class_const_decl (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | class_const_decl (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_class_const_decl parameter-1)) return-item))
    ;

class_const_decl:
    identifier '=' expr backup_doc_comment (progn (let ((parameter-4 '(value $4))(parameter-4 '(value $4))(parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_const_elem parameter-1 parameter-3 (if parameter-4 (phps-mode-parser--zend_ast_create_zval_from_str parameter-4) nil))) return-item))
    ;

const_decl:
    T_STRING '=' expr backup_doc_comment (progn (let ((parameter-4 '(value $4))(parameter-4 '(value $4))(parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_const_elem parameter-1 parameter-3 (if parameter-4 (phps-mode-parser--zend_ast_create_zval_from_str parameter-4) nil))) return-item))
    ;

echo_expr_list:
    echo_expr_list ',' echo_expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | echo_expr (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_stmt_list parameter-1)) return-item))
    ;

echo_expr:
    expr (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_echo parameter-1)) return-item))
    ;

for_exprs:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | non_empty_for_exprs (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

non_empty_for_exprs:
    non_empty_for_exprs ',' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | expr (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_expr_list parameter-1)) return-item))
    ;

anonymous_class:
    T_CLASS (progn (let ((return-item '(value $$))) return-item)) ctor_arguments extends_from implements_list backup_doc_comment '{' class_statement_list '}' (progn (let ((parameter-3 '(value $3))(parameter-8 '(value $8))(parameter-5 '(value $5))(parameter-4 '(value $4))(parameter-6 '(value $6))(parameter-2 '(value $2))(return-item '(value $$)))(setq phps-mode-parser--decl (phps-mode-parser--zend_ast_create_decl 'phps-mode-parser--zend_ast_class 'phps-mode-parser--zend_acc_anon_class parameter-2 parameter-6 nil parameter-4 parameter-5 parameter-8 nil))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_new phps-mode-parser--decl parameter-3)) return-item))
    ;

new_expr:
    T_NEW class_name_reference ctor_arguments (progn (let ((parameter-3 '(value $3))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_new parameter-2 parameter-3)) return-item))
    | T_NEW anonymous_class (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

expr:
    variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_LIST '(' array_pair_list ')' '=' expr (progn (let ((parameter-6 '(value $6))(parameter-3 '(value $3))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put parameter-3 'attr 'phps-mode-parser--zend_array_syntax_list)(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_assign parameter-3 parameter-6)) return-item))
    | '[' array_pair_list ']' '=' expr (progn (let ((parameter-5 '(value $5))(parameter-2 '(value $2))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put parameter-2 'attr 'phps-mode-parser--zend_array_syntax_short)(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_assign parameter-2 parameter-5)) return-item))
    | variable '=' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_assign parameter-1 parameter-3)) return-item))
    | variable '=' '&' variable (progn (let ((parameter-4 '(value $4))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_assign_ref parameter-1 parameter-4)) return-item))
    | T_CLONE expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_clone parameter-2)) return-item))
    | variable T_PLUS_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_add parameter-1 parameter-3)) return-item))
    | variable T_MINUS_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_sub parameter-1 parameter-3)) return-item))
    | variable T_MUL_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_mul parameter-1 parameter-3)) return-item))
    | variable T_POW_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_pow parameter-1 parameter-3)) return-item))
    | variable T_DIV_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_div parameter-1 parameter-3)) return-item))
    | variable T_CONCAT_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_concat parameter-1 parameter-3)) return-item))
    | variable T_MOD_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_mod parameter-1 parameter-3)) return-item))
    | variable T_AND_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_bw_and parameter-1 parameter-3)) return-item))
    | variable T_OR_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_bw_or parameter-1 parameter-3)) return-item))
    | variable T_XOR_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_bw_xor parameter-1 parameter-3)) return-item))
    | variable T_SL_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_sl parameter-1 parameter-3)) return-item))
    | variable T_SR_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_assign_op 'phps-mode-parser--zend_sr parameter-1 parameter-3)) return-item))
    | variable T_COALESCE_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_assign_coalesce parameter-1 parameter-3)) return-item))
    | variable T_INC (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_post_inc parameter-1)) return-item))
    | T_INC variable (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_pre_inc parameter-2)) return-item))
    | variable T_DEC (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_post_dec parameter-1)) return-item))
    | T_DEC variable (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_pre_dec parameter-2)) return-item))
    | expr T_BOOLEAN_OR expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_or parameter-1 parameter-3)) return-item))
    | expr T_BOOLEAN_AND expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_and parameter-1 parameter-3)) return-item))
    | expr T_LOGICAL_OR expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_or parameter-1 parameter-3)) return-item))
    | expr T_LOGICAL_AND expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_and parameter-1 parameter-3)) return-item))
    | expr T_LOGICAL_XOR expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_bool_xor parameter-1 parameter-3)) return-item))
    | expr '|' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_bw_or parameter-1 parameter-3)) return-item))
    | expr '&' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_bw_and parameter-1 parameter-3)) return-item))
    | expr '^' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_bw_xor parameter-1 parameter-3)) return-item))
    | expr '.' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_concat parameter-1 parameter-3)) return-item))
    | expr '+' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_add parameter-1 parameter-3)) return-item))
    | expr '-' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_sub parameter-1 parameter-3)) return-item))
    | expr '*' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_mul parameter-1 parameter-3)) return-item))
    | expr T_POW expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_pow parameter-1 parameter-3)) return-item))
    | expr '/' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_div parameter-1 parameter-3)) return-item))
    | expr '%' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_mod parameter-1 parameter-3)) return-item))
    | expr T_SL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_sl parameter-1 parameter-3)) return-item))
    | expr T_SR expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_sr parameter-1 parameter-3)) return-item))
    | '+' expr prec '~' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_unary_plus parameter-2)) return-item))
    | '-' expr prec '~' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_unary_minus parameter-2)) return-item))
    | '!' expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_unary_op 'phps-mode-parser--zend_bool_not parameter-2)) return-item))
    | '~' expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_unary_op 'phps-mode-parser--zend_bw_not parameter-2)) return-item))
    | expr T_IS_IDENTICAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_is_identical parameter-1 parameter-3)) return-item))
    | expr T_IS_NOT_IDENTICAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_is_not_identical parameter-1 parameter-3)) return-item))
    | expr T_IS_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_is_equal parameter-1 parameter-3)) return-item))
    | expr T_IS_NOT_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_is_not_equal parameter-1 parameter-3)) return-item))
    | expr '<' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_is_smaller parameter-1 parameter-3)) return-item))
    | expr T_IS_SMALLER_OR_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_is_smaller_or_equal parameter-1 parameter-3)) return-item))
    | expr '>' expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_greater parameter-1 parameter-3)) return-item))
    | expr T_IS_GREATER_OR_EQUAL expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_greater_equal parameter-1 parameter-3)) return-item))
    | expr T_SPACESHIP expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_binary_op 'phps-mode-parser--zend_spaceship parameter-1 parameter-3)) return-item))
    | expr T_INSTANCEOF class_name_reference (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_instanceof parameter-1 parameter-3)) return-item))
    | '(' expr ')' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2)(if (equal (plist-get return-item 'kind) 'phps-mode-parser--zend_ast_conditional) (plist-put return-string 'attr 'phps-mode-parser--zend_parenthesized_conditional)) return-item))
    | new_expr (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | expr '?' expr ':' expr (progn (let ((parameter-5 '(value $5))(parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_conditional parameter-1 parameter-3 parameter-5)) return-item))
    | expr '?' ':' expr (progn (let ((parameter-4 '(value $4))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_conditional parameter-1 nil parameter-4)) return-item))
    | expr T_COALESCE expr (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_coalesce parameter-1 parameter-3)) return-item))
    | internal_functions_in_yacc (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_INT_CAST expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_cast 'phps-mode-parser--is_long parameter-2)) return-item))
    | T_DOUBLE_CAST expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_cast 'phps-mode-parser--is_double parameter-2)) return-item))
    | T_STRING_CAST expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_cast 'phps-mode-parser--is_string parameter-2)) return-item))
    | T_ARRAY_CAST expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_cast 'phps-mode-parser--is_array parameter-2)) return-item))
    | T_OBJECT_CAST expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_cast 'phps-mode-parser--is_object parameter-2)) return-item))
    | T_BOOL_CAST expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_cast 'phps-mode-parser--_is_bool parameter-2)) return-item))
    | T_UNSET_CAST expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_cast 'phps-mode-parser--is_null parameter-2)) return-item))
    | T_EXIT exit_expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_exit parameter-2)) return-item))
    | '@' expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_silence parameter-2)) return-item))
    | scalar (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '`' backticks_expr '`' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_shell_exec parameter-2)) return-item))
    | T_PRINT expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_print parameter-2)) return-item))
    | T_YIELD (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_yield nil nil))(phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags (logior (phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags) 'phps-mode-parser--zend_acc_generator)) return-item))
    | T_YIELD expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_yield parameter-2 nil))(phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags (logior (phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags) 'phps-mode-parser--zend_acc_generator)) return-item))
    | T_YIELD expr T_DOUBLE_ARROW expr (progn (let ((parameter-2 '(value $2))(parameter-4 '(value $4))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_yield parameter-4 parameter-2))(phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags (logior (phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags) 'phps-mode-parser--zend_acc_generator)) return-item))
    | T_YIELD_FROM expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_yield_from parameter-2))(phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags (logior (phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags) 'phps-mode-parser--zend_acc_generator)) return-item))
    | T_THROW expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_throw parameter-2)) return-item))
    | inline_function (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_STATIC inline_function (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2)(plist-put return-string 'flags (logior (plist-get return-item 'flags) 'phps-mode-parser--zend_acc_static)) return-item))
    ;

inline_function:
    function returns_ref backup_doc_comment '(' parameter_list ')' lexical_vars return_type backup_fn_flags '{' inner_statement_list '}' backup_fn_flags (progn (let ((parameter-9 '(value $9))(parameter-8 '(value $8))(parameter-11 '(value $11))(parameter-7 '(value $7))(parameter-5 '(value $5))(parameter-3 '(value $3))(parameter-1 '(value $1))(parameter-13 '(value $13))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_decl 'phps-mode-parser--zend_ast_closure (logior parameter-2 parameter-13) parameter-1 parameter-3 (phps-mode-parser--zend_string_init "{closure}" (- (phps-mode-parser--sizeof "{closure}") 1) 0) parameter-5 parameter-7 parameter-11 parameter-8))(phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags parameter-9) return-item))
    | fn returns_ref '(' parameter_list ')' return_type backup_doc_comment T_DOUBLE_ARROW backup_fn_flags backup_lex_pos expr backup_fn_flags (progn (let ((parameter-9 '(value $9))(parameter-10 '(value $10))(parameter-6 '(value $6))(parameter-11 '(value $11))(parameter-4 '(value $4))(parameter-7 '(value $7))(parameter-1 '(value $1))(parameter-12 '(value $12))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_decl 'phps-mode-parser--zend_ast_arrow_func (logior parameter-2 parameter-12) parameter-1 parameter-7 (phps-mode-parser--zend_string_init "{closure}" (- (phps-mode-parser--sizeof "{closure}") 1) 0) parameter-4 nil (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_return parameter-11) parameter-6))(plist-put return-string 'lex_pos parameter-10)(phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags parameter-9) return-item))
    ;

fn:
    T_FN (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--cg phps-mode-parser--zend_lineno)) return-item))
    ;

function:
    T_FUNCTION (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--cg phps-mode-parser--zend_lineno)) return-item))
    ;

backup_doc_comment:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--cg phps-mode-parser--doc_comment))(phps-mode-parser--cg 'phps-mode-parser--doc_comment nil) return-item))
    ;

backup_fn_flags:
    prec PREC_ARROW_FUNCTION empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--cg phps-mode-parser--extra_fn_flags))(phps-mode-parser--cg 'phps-mode-parser--extra_fn_flags 0) return-item))
    ;

backup_lex_pos:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--lang_scng phps-mode-parser--yy_text)) return-item))
    ;

returns_ref:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value 0) return-item))
    | '&' (progn (let ((return-item '(value $$)))(plist-put return-item 'value 'phps-mode-parser--zend_acc_return_reference) return-item))
    ;

lexical_vars:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | T_USE '(' lexical_var_list ')' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3) return-item))
    ;

lexical_var_list:
    lexical_var_list ',' lexical_var (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | lexical_var (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_closure_uses parameter-1)) return-item))
    ;

lexical_var:
    T_VARIABLE (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '&' T_VARIABLE (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2)(plist-put return-string 'attr 'phps-mode-parser--zend_bind_ref) return-item))
    ;

function_call:
    name argument_list (progn (let ((parameter-2 '(value $2))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_call parameter-1 parameter-2)) return-item))
    | class_name T_PAAMAYIM_NEKUDOTAYIM member_name argument_list (progn (let ((parameter-4 '(value $4))(parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_static_call parameter-1 parameter-3 parameter-4)) return-item))
    | variable_class_name T_PAAMAYIM_NEKUDOTAYIM member_name argument_list (progn (let ((parameter-4 '(value $4))(parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_static_call parameter-1 parameter-3 parameter-4)) return-item))
    | callable_expr argument_list (progn (let ((parameter-2 '(value $2))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_call parameter-1 parameter-2)) return-item))
    ;

class_name:
    T_STATIC (progn (let ((return-item '(value $$))(zv nil))(phps-mode-parser--zval_interned_str (lambda(return) (setq zv return)) (phps-mode-parser--zstr_known 'phps-mode-parser--zend_str_static))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_zval_ex zv 'phps-mode-parser--zend_name_not_fq)) return-item))
    | name (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

class_name_reference:
    class_name (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | new_variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '(' expr ')' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

exit_expr:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | '(' optional_expr ')' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

backticks_expr:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_zval_from_str (phps-mode-parser--zstr_empty_alloc))) return-item))
    | T_ENCAPSED_AND_WHITESPACE (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | encaps_list (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

ctor_arguments:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 0 'phps-mode-parser--zend_ast_arg_list)) return-item))
    | argument_list (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

dereferencable_scalar:
    T_ARRAY '(' array_pair_list ')' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3)(plist-put return-string 'attr 'phps-mode-parser--zend_array_syntax_long) return-item))
    | '[' array_pair_list ']' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2)(plist-put return-string 'attr 'phps-mode-parser--zend_array_syntax_short) return-item))
    | T_CONSTANT_ENCAPSED_STRING (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '"' encaps_list '"' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

scalar:
    T_LNUMBER (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_DNUMBER (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | T_START_HEREDOC T_END_HEREDOC (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_zval_from_str (phps-mode-parser--zstr_empty_alloc))) return-item))
    | T_START_HEREDOC encaps_list T_END_HEREDOC (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | dereferencable_scalar (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | constant (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | class_constant (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

constant:
    name (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_const parameter-1)) return-item))
    | T_LINE (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_magic_const 'phps-mode-parser--t_line)) return-item))
    | T_FILE (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_magic_const 'phps-mode-parser--t_file)) return-item))
    | T_DIR (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_magic_const 'phps-mode-parser--t_dir)) return-item))
    | T_TRAIT_C (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_magic_const 'phps-mode-parser--t_trait_c)) return-item))
    | T_METHOD_C (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_magic_const 'phps-mode-parser--t_method_c)) return-item))
    | T_FUNC_C (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_magic_const 'phps-mode-parser--t_func_c)) return-item))
    | T_NS_C (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_magic_const 'phps-mode-parser--t_ns_c)) return-item))
    | T_CLASS_C (progn (let ((return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_magic_const 'phps-mode-parser--t_class_c)) return-item))
    ;

class_constant:
    class_name T_PAAMAYIM_NEKUDOTAYIM identifier (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_class_const_or_name parameter-1 parameter-3)) return-item))
    | variable_class_name T_PAAMAYIM_NEKUDOTAYIM identifier (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_class_const_or_name parameter-1 parameter-3)) return-item))
    ;

optional_expr:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | expr (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

variable_class_name:
    fully_dereferencable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

fully_dereferencable:
    variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '(' expr ')' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | dereferencable_scalar (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | class_constant (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

array_object_dereferencable:
    fully_dereferencable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | constant (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

callable_expr:
    callable_variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '(' expr ')' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | dereferencable_scalar (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

callable_variable:
    simple_variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-1)) return-item))
    | array_object_dereferencable '[' optional_expr ']' (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_dim parameter-1 parameter-3)) return-item))
    | array_object_dereferencable '{' expr '}' (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_dim 'phps-mode-parser--zend_dim_alternative_syntax parameter-1 parameter-3)) return-item))
    | array_object_dereferencable T_OBJECT_OPERATOR property_name argument_list (progn (let ((parameter-4 '(value $4))(parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_method_call parameter-1 parameter-3 parameter-4)) return-item))
    | function_call (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

variable:
    callable_variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | static_member (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | array_object_dereferencable T_OBJECT_OPERATOR property_name (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_prop parameter-1 parameter-3)) return-item))
    ;

simple_variable:
    T_VARIABLE (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '$' '{' expr '}' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3) return-item))
    | '$' simple_variable (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-2)) return-item))
    ;

static_member:
    class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_static_prop parameter-1 parameter-3)) return-item))
    | variable_class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_static_prop parameter-1 parameter-3)) return-item))
    ;

new_variable:
    simple_variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-1)) return-item))
    | new_variable '[' optional_expr ']' (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_dim parameter-1 parameter-3)) return-item))
    | new_variable '{' expr '}' (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_dim 'phps-mode-parser--zend_dim_alternative_syntax parameter-1 parameter-3)) return-item))
    | new_variable T_OBJECT_OPERATOR property_name (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_prop parameter-1 parameter-3)) return-item))
    | class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_static_prop parameter-1 parameter-3)) return-item))
    | new_variable T_PAAMAYIM_NEKUDOTAYIM simple_variable (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_static_prop parameter-1 parameter-3)) return-item))
    ;

member_name:
    identifier (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '{' expr '}' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | simple_variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-1)) return-item))
    ;

property_name:
    T_STRING (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '{' expr '}' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    | simple_variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-1)) return-item))
    ;

array_pair_list:
    non_empty_array_pair_list (progn (let ((parameter-1 '(value $1))(return-item '(value $$)));; allow single trailing comma
(plist-put return-item 'value (phps-mode-parser--zend_ast_list_rtrim parameter-1)) return-item))
    ;

possible_array_pair:
    empty (progn (let ((return-item '(value $$)))(plist-put return-item 'value nil) return-item))
    | array_pair (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    ;

non_empty_array_pair_list:
    non_empty_array_pair_list ',' possible_array_pair (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-3)) return-item))
    | possible_array_pair (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_array parameter-1)) return-item))
    ;

array_pair:
    expr T_DOUBLE_ARROW expr (progn (let ((parameter-1 '(value $1))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_array_elem parameter-3 parameter-1)) return-item))
    | expr (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_array_elem parameter-1 nil)) return-item))
    | expr T_DOUBLE_ARROW '&' variable (progn (let ((parameter-1 '(value $1))(parameter-4 '(value $4))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_array_elem 1 parameter-4 parameter-1)) return-item))
    | '&' variable (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_array_elem 1 parameter-2 nil)) return-item))
    | T_ELLIPSIS expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_unpack parameter-2)) return-item))
    | expr T_DOUBLE_ARROW T_LIST '(' array_pair_list ')' (progn (let ((parameter-1 '(value $1))(parameter-5 '(value $5))(parameter-5 '(value $5))(return-item '(value $$)))(plist-put parameter-5 'attr 'phps-mode-parser--zend_array_syntax_list)(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_array_elem parameter-5 parameter-1)) return-item))
    | T_LIST '(' array_pair_list ')' (progn (let ((parameter-3 '(value $3))(parameter-3 '(value $3))(return-item '(value $$)))(plist-put parameter-3 'attr 'phps-mode-parser--zend_array_syntax_list)(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_array_elem parameter-3 nil)) return-item))
    ;

encaps_list:
    encaps_list encaps_var (progn (let ((parameter-2 '(value $2))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-2)) return-item))
    | encaps_list T_ENCAPSED_AND_WHITESPACE (progn (let ((parameter-2 '(value $2))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_list_add parameter-1 parameter-2)) return-item))
    | encaps_var (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 1 'phps-mode-parser--zend_ast_encaps_list parameter-1)) return-item))
    | T_ENCAPSED_AND_WHITESPACE encaps_var (progn (let ((parameter-2 '(value $2))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_list 2 'phps-mode-parser--zend_ast_encaps_list parameter-1 parameter-2)) return-item))
    ;

encaps_var:
    T_VARIABLE (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-1)) return-item))
    | T_VARIABLE '[' encaps_var_offset ']' (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_dim (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-1) parameter-3)) return-item))
    | T_VARIABLE T_OBJECT_OPERATOR T_STRING (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_prop (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-1) parameter-3)) return-item))
    | T_DOLLAR_OPEN_CURLY_BRACES expr '}' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-2)) return-item))
    | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '}' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-2)) return-item))
    | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}' (progn (let ((parameter-4 '(value $4))(parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_dim (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-2) parameter-4)) return-item))
    | T_CURLY_OPEN variable '}' (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value parameter-2) return-item))
    ;

encaps_var_offset:
    T_STRING (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | T_NUM_STRING (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | '-' T_NUM_STRING (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_negate_num_string parameter-2)) return-item))
    | T_VARIABLE (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_var parameter-1)) return-item))
    ;

internal_functions_in_yacc:
    T_ISSET '(' isset_variables possible_comma ')' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value parameter-3) return-item))
    | T_EMPTY '(' expr ')' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_empty parameter-3)) return-item))
    | T_INCLUDE expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_include_or_eval 'phps-mode-parser--zend_include parameter-2)) return-item))
    | T_INCLUDE_ONCE expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_include_or_eval 'phps-mode-parser--zend_include_once parameter-2)) return-item))
    | T_EVAL '(' expr ')' (progn (let ((parameter-3 '(value $3))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_include_or_eval 'phps-mode-parser--zend_eval parameter-3)) return-item))
    | T_REQUIRE expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_include_or_eval 'phps-mode-parser--zend_require parameter-2)) return-item))
    | T_REQUIRE_ONCE expr (progn (let ((parameter-2 '(value $2))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create_ex 'phps-mode-parser--zend_ast_include_or_eval 'phps-mode-parser--zend_require_once parameter-2)) return-item))
    ;

isset_variables:
    isset_variable (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value parameter-1) return-item))
    | isset_variables ',' isset_variable (progn (let ((parameter-3 '(value $3))(parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_and parameter-1 parameter-3)) return-item))
    ;

isset_variable:
    expr (progn (let ((parameter-1 '(value $1))(return-item '(value $$)))(plist-put return-item 'value (phps-mode-parser--zend_ast_create 'phps-mode-parser--zend_ast_isset parameter-1)) return-item))
    ;


;; NOTE Generated grammar ends here