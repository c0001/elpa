;;; face-shift.el --- Shift the color of certain faces -*- lexical-binding: t -*-

;; Author: Philip K. <philip@warpmail.net>
;; Version: 0.1.0
;; Keywords: faces
;; Package-Requires: ((emacs "24.1"))
;; URL: https://git.sr.ht/~zge/face-shift

;; This file is NOT part of Emacs.
;;
;; This file is in the public domain, to the extent possible under law,
;; published under the CC0 1.0 Universal license.
;;
;; For a full copy of the CC0 license see
;; https://creativecommons.org/publicdomain/zero/1.0/legalcode

;;; Commentary:
;;
;; `face-shift-by' generates a function that linearly shifts all faces
;; in `face-shift-faces'.
;;
;; To use face shift, add a function generated by `face-shift' to a hook
;; of your choice like so:
;;
;;     (add-hook 'prog-mode-hook (face-shift 'green))
;;
;; or optionally save the generated function in a variable before adding
;; it.

(require 'color)
(eval-when-compile (require 'cl-lib))

;;; Code:

(defgroup face-shift nil
  "Distort color of certain faces."
  :group 'faces
  :prefix "face-shift-")

(defcustom face-shift-inverted nil
  "Should color-space be inverted before transformed?

Note that it might be necessary to change the value of
`face-shift-intensity' to get the intended effect."
  :type 'boolean)

(defcustom face-shift-intensity 0.25
  "Value to replace a `int' symbol with in `face-shift-color'."
  :type 'float)

(defcustom face-shift-color
  '((red . 0)
    (cyan . 180)
    (blue . 240)
    (pink . 300)
    (yellow . 60)
    (peach . 40)
    (green . 120)
    (purple . 280))
  "Alist of matrices representing RGB transformations.
Symbols `int', `max' and `min' are substituted with
`face-shift-intensity', `face-shift-maximum' and
`face-shift-minimum' respectively."
  :type '(alist :key-type symbol :value-type float)
  :group 'face-shift)

(defcustom face-shift-faces
  (append '(default cursor region isearch)
          (cl-remove-if-not
           (lambda (sym)
             (string-match-p "\\`font-lock-"
                             (symbol-name sym)))
           (face-list)))
  "Faces that `face-shift' should distort."
  :type '(list face)
  :group 'face-shift)

(defun face-shift-by (face prop hue)
  "Calculate color distortion and apply to property PROP of FACE.
MAT describes the linear transformation that calculates the new
color. If property PROP is not a color, nothing is changed."
  (let* ((intensity (if face-shift-inverted
                           (- 1 face-shift-intensity)
                      face-shift-intensity))
         (bg (face-attribute face prop)))
    (unless (eq bg 'unspecified)
	  (let* ((color-rgb (color-name-to-rgb bg))
			 (color-hsl (apply #'color-rgb-to-hsl color-rgb))
			 (new-rgb (apply #'color-hsl-to-rgb
							 (list (/ hue 360.0)
								   face-shift-intensity
								   (nth 2 color-hsl))))
			 (ncolor (apply #'color-rgb-to-hex new-rgb)))
		(face-remap-add-relative face `(,prop ,ncolor))))))

(defun face-shift (color &optional ignore)
  "Produce a function that will shift face color.

All background and foreground color behind the faces listed in
`face-shift-faces' will be attempted to shift using
`face-shift-by'. The generated function can then be added to a
hook. COLOR should index a transformation from the
`face-shift-color' alist.

If IGNORE is non-nil, it has to be a list of modes that should be
ignored by this hook. For example

   (face-shift 'green '(mail-mode))

will apply the green shift, unless the mode of the hook it was
added to is ‘mail-mode’ or a derivative."
  (let ((hue (cdr (assq color face-shift-color))))
    (lambda ()
      (unless (cl-some #'derived-mode-p ignore)
        (dolist (face face-shift-faces)
          (face-shift-by face :foreground hue)
          (face-shift-by face :background hue))))))

(provide 'face-shift)

;;; face-shift.el ends here
