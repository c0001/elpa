;;; face-shift.el --- shift the color of certain faces -*- lexical-binding: t -*-

;; Author: Philip K. <philip@warpmail.net>
;; Version: 0.1.0
;; Keywords: c, abbrev, convenience
;; Package-Requires: ((emacs "24"))
;; URL: https://git.sr.ht/~zge/face-shift

;; This file is NOT part of Emacs.
;;
;; This file is in the public domain, to the extent possible under law,
;; published under the CC0 1.0 Universal license.
;;
;; For a full copy of the CC0 license see
;; https://creativecommons.org/publicdomain/zero/1.0/legalcode

;;; Commentary:
;;
;; `face-shift-by' generates a function that linearly shifts all faces
;; in `face-shift-faces'.
;;
;; To use face shift, add a function generated by `face-shift' to a hook
;; of your choice like so:
;;
;;     (add-hook 'prog-mode-hook (face-shift 'green))
;;
;; or optionally save the generated function in a variable before adding
;; it.

(require 'color)
(eval-when-compile (require 'cl-lib))

;;; Code:

(defgroup face-shift nil
  "Distort colours of certain faces."
  :group 'faces
  :prefix "face-shift-")

(defcustom face-shift-force-fit nil
  "Ensure transformations stay in RGB-unit-space.

This will be done by wrapping values over 1.0 to 1.0."
  :type 'boolean
  :group 'face-shift)

(defcustom face-shift-intensity 0.9
  "Value to replace a `int' symbol with in `face-shift-colors'."
  :type 'float
  :group 'face-shift)

(defcustom face-shift-minimum 0.0
  "Value to replace a `min' symbol with in `face-shift-colors'."
  :type 'float
  :group 'face-shift)

(defcustom face-shift-maximum 1.0
  "Value to replace a `max' symbol with in `face-shift-colors'."
  :type 'float
  :group 'face-shift)

(defcustom face-shift-colors
  '((blue .   ((int min min) (min max min) (min min max)))
    (pink .   ((max min min) (min int min) (min min max)))
    (yellow . ((max min min) (min max min) (min min int)))
    (peach .  ((max min min) (min int min) (min min int)))
    (green .  ((int min min) (min max min) (min min int)))
    (purple . ((int min min) (min int min) (min min max))))
  "Alist of matrices representing RGB transformations.
Symbols `int', `max' and `min' are substituted with
`face-shift-intensity', `face-shift-maximum' and
`face-shift-minimum' respectively."
  :type '(list (list symbol))
  :group 'face-shift)

(defcustom face-shift-faces
  (append '(default cursor region isearch)
          (cl-remove-if-not
           (lambda (sym)
             (string-match-p (rx bos "font-lock-")
                             (symbol-name sym)))
           (face-list)))
  "Faces that `face-shift' should distort."
  :type '(list face)
  :group 'face-shift)

(defun face-shift--force-fit (color)
  (let ((max (apply #'max color)))
    (mapcar (lambda (x) (/ x max))
            color)))

(defun face-shift-by (face prop mat)
  "Calculate colour distortion and apply to property PROP of FACE.
MAT describes the linear transformation that calculates the new
colour. If property PROP is not a color, nothing is changed."
  (let* ((mvp (lambda (vec)
                (mapcar (lambda (row)
                          (apply #'+ (cl-mapcar #'* row vec)))
                        mat)))
         (bg (face-attribute face prop))
         (colors (color-name-to-rgb bg))
         (trans (funcall mvp colors))
         (ncolor
          (apply
           #'color-rgb-to-hex
           (append
            (if face-shift-force-fit
                (face-shift--force-fit trans)
              trans)
            '(2)))))
    (unless (eq bg 'unspecified)
      (face-remap-add-relative face `(,prop ,ncolor)))
    ncolor))

(defun face-shift (color &optional ignore)
  "Produce a function that will shift face colors.

All background and foreground colours behind the faces listed in
`face-shift-faces' will be attempted to shift using
`face-shift-by'. The generated function can then be added to a
hook. COLOR should index a transformation from the
`face-shift-colors' alist.

If IGNORE is non-nil, it has to be a list of modes that should be
ignored by this hook. For example

   (face-shift 'green '(mail-mode))

will apply the green shift, unless the mode of the hook it was
added to is ‘mail-mode’ or a derivative."
  (let ((mat (cl-sublis
              `((int . ,face-shift-intensity)
                (max . ,face-shift-maximum)
                (min . ,face-shift-minimum))
              (cdr (assq color face-shift-colors)))))
    (lambda ()
      (unless (cl-some #'derived-mode-p ignore)
        (dolist (face face-shift-faces)
          (face-shift-by face :foreground mat)
          (face-shift-by face :background mat))))))

(provide 'face-shift)

;;; face-shift.el ends here
