#+TITLE: LaTeX table wizard - Magic editing of LaTeX tables
#+SUBTITLE: for version {{{version}}}
#+AUTHOR: Enrico Flor
#+EMAIL: enrico@eflor.net

#+OPTIONS: ':t toc:t author:t email:t
#+MACRO: version 0.1.0
#+MACRO: updated last updated 14 November 2022

Copyright (C) 2022 Enrico Flor.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”
* Overview

One of org-mode's magic features is its table editing capabilities.
The goal of this package is to replicate that luxury for LaTeX
table(-like) environments.

LaTeX-table-wizard's UI is based on [[https://elpa.gnu.org/packages/transient.html][transient]].  While the user can
change all the bindings, and can use all the commands without the
transient interface, this readme will refer to the commands through
the default bindings as they can be seen in the transient below.

The transient interface is invoked through the ~latex-table-wizard-do~
command, and exited, as usual, with ~C-g~.

An important feature of LaTeX-table-wizard is that it tries to be
smart: for instance, it should not be fooled if the current table-like
environments contains embedded tables (that is, other tabular
environments inside of its cells).  The table is parsed so that these
big cells are treated like any other cell.

[[./wizard-01.gif]]

* Available commands
For now, we will assume a standard LaTeX syntax for tabular
environments, where ~&~ delimits columns and ~\\~ rows (see [[#user-defined-envs][below]] for info
as to how to specify additional syntaxes).

Whenever we say "current" we mean "at point".
** Relative motion commands

These commands move point N cells to the right, left, down, and up.  N
is passed as a prefix argument, and if it's not passed, it defaults
to 1.

| Command                  | Default key |
|--------------------------+-------------|
| ~latex-table-wizard-right~ | ~f~           |
| ~latex-table-wizard-left~  | ~b~           |
| ~latex-table-wizard-down~  | ~n~           |
| ~latex-table-wizard-up~    | ~p~           |

With just one of these you can get anywhere you want in the table:

#+begin_src LaTeX
\begin{tabular}{lll}
  A0 & B0 & C0 \\\hline
  A1 & B1 & C1 \\
  A2 & B2 & C2
\end{tabular}
#+end_src

This is because these commands try to Do What You Mean if there is no
suitable cell to move to:

+ Point on ~C0~, ~latex-table-wizard-right~ ⇒ point on ~A1~
+ Point on ~A0~, ~latex-table-wizard-left~ ⇒ point on ~C2~
+ Point on ~C2~, ~latex-table-wizard-down~ ⇒ point on ~A0~
+ Point on ~B0~, ~latex-table-wizard-up~ ⇒ point on ~A2~

and so on.
** Absolute motion commands

| Command                              | Default key | Move to...                    |
|--------------------------------------+-------------+-------------------------------|
| ~latex-table-wizard-beginning-of-cell~ | ~a~           | end of current cell           |
| ~latex-table-wizard-end-of-cell~       | ~e~           | beginning of current cell     |
| ~latex-table-wizard-beginning-of-row~  | ~B~           | leftmost cell in current row  |
| ~latex-table-wizard-end-of-row~        | ~F~           | rightmost cell in current row |
| ~latex-table-wizard-bottom~            | ~N~           | bottom cell in current column |
| ~latex-table-wizard-top~               | ~P~           | top cell in current column    |
** Mark, kill and insert commands
| Command                          | Default key |                                            |
|----------------------------------+-------------+--------------------------------------------|
| ~latex-table-wizard-mark-cell~     | ~m c~         | mark current cell                          |
| ~latex-table-wizard-insert-column~ | ~i c~         | insert empty column to the right           |
| ~latex-table-wizard-insert-row~    | ~i r~         | insert row below                           |
| ~latex-table-wizard-kill-column~   | ~k c~         | add content of current column to kill ring |
| ~latex-table-wizard-kill-row~      | ~k r~         | add content of current row to kill ring    |
| ~exchange-point-and-mark~          | ~x~           |                                            |
** Swap adjacent fields

| Command                              | Default key | Swap current...                  |
|--------------------------------------+-------------+----------------------------------|
| ~latex-table-wizard-swap-cell-right~   | ~C-f~         | cell with the one to the right   |
| ~latex-table-wizard-swap-cell-left~    | ~C-b~         | cell with the one to the left    |
| ~latex-table-wizard-swap-cell-down~    | ~C-n~         | cell with the one below          |
| ~latex-table-wizard-swap-cell-up~      | ~C-p~         | cell with the one above          |
| ~latex-table-wizard-swap-column-right~ | ~M-f~         | column with the one to the right |
| ~latex-table-wizard-swap-column-left~  | ~M-b~         | column with the one to the left  |
| ~latex-table-wizard-swap-row-down~     | ~M-n~         | row with the one below           |
| ~latex-table-wizard-swap-row-up~       | ~M-p~         | row with the one above           |

For these commands, think of the cells and columns as circular: if
there is no item in the direction given, the target is the one on the
opposite end of the current cell.  So for example:

#+begin_src LaTeX
\begin{tabular}{lll}
  A0 & B0 & C0 \\\hline
  A1 & B1 & C1 \\
  A2 & B2 & C2
\end{tabular}
#+end_src

This is because these commands try to Do What You Mean if there is no
suitable cell to move to:

+ Point on ~B0~, ~latex-table-wizard-swap-row-up~
  ⇒
#+begin_src LaTeX
\begin{tabular}{lll}
 A2  & B2  & C2  \\\hline
  A1 & B1 & C1 \\
 A0  & B0  & C0
\end{tabular}
#+end_src
+ Point on ~C2~, ~latex-table-wizard-swap-cell-right~
  ⇒
#+begin_src latex
\begin{tabular}{lll}
 C0  & B0 & A0  \\\hline
  A1 & B1 & C1 \\
  A2 & B2 & C2
\end{tabular}
#+end_src

** Swap arbitrary fields
To swap arbitrary fields one must first *select* something and then
move point somewhere else and perform the swap.  Importantly,
*selecting does not mean marking*: the mark is not even moved when
selecting.

The simplest case is one in which the current cell, column or row are
selected:

| Command                          | Default key | Select current... |
|----------------------------------+-------------+-------------------|
| ~latex-table-wizard-select-cell~   | ~SPC~         | cell              |
| ~latex-table-wizard-select-column~ | ~c~           | column            |
| ~latex-table-wizard-select-row~    | ~r~           | row               |

Things can be deselected too:

| Command                              | Default key | Deselect current... |
|--------------------------------------+-------------+---------------------|
| ~latex-table-wizard-deselect-cell~   | ~d SPC~     | cell                |
| ~latex-table-wizard-deselect-column~ | ~d c~       | column              |
| ~latex-table-wizard-deselect-row~    | ~d r~       | row                 |

Once things are selected, you move point somewhere else in the table
(with the above mentioned motion commands), and then:

| ~latex-table-wizard-swap~ | ~s~ | swap selection and current thing |

What is swapped depends on what is selected: if the selection was only
a cell, then that cell and the current one are swapped.  If it was (a
potentially discontinuous segment of) a column or a row, then that
selection is swapped with the current column or row or the
corresponding portion thereof.  If you selected multiple cell that are
not part of the same column or row, the swap won't happen
(LaTeX-table-wizard doesn't know what to do).

** Format the table

Two more command fix the appearance of the table.  To "compress" the
table by removing excess white space at the edges of each cell, call
~latex-table-wizard-clean-whitespace~.

Call ~latex-table-wizard-align~ if you want the columns to be vertically
aligned too (and each row starting on its own line).  This alignment
command tries to be smart and not be fooled by column or row
delimiters embedded in a cell.

| Command                             | Default key |
|-------------------------------------+-------------|
| ~latex-table-wizard-clean-whitespace~ | ~w~           |
| ~latex-table-wizard-align~            | ~TAB~         |


* Customization
** Change keybindings
To change the default keybindings you give an appropriate value to the
association list ~latex-table-wizard-bindings-alist~ and then call the
function ~latex-table-wizard-modify-bindings~.

Suppose you want to keep all the defaults except that you want to bind
~l~ to ~latex-table-wizard-right~ and ~s l~ to
~latex-table-wizard-swap-cell-right~.  To achieve that add this to
your configuration of ~latex-table-wizard~:

#+begin_src emacs-lisp
(setq latex-table-wizard-bindings-alist
      '((latex-table-wizard-right . "l")
        (latex-table-wizard-swap-cell-right . "s l")))
#+end_src

The syntax of the values (the keys) is the same accepted by the built
in ~kbd~ macro.
** Define rules for new environments
:PROPERTIES:
:CUSTOM_ID: user-defined-envs
:END:
Remember the default values used for parsing table environments:

#+begin_src emacs-lisp
(defconst latex-table-wizard-column-delimiters '("[^\\\\]&")
  "List of regexps matching column delimiters.")

(defconst latex-table-wizard-row-delimiters '("\\\\\\\\")
  "List of regexps matching row delimiters.")

(defvar latex-table-wizard-hline-macros '("hline"
                                          "midrule"
                                          "toprule"
                                          "bottomrule"))
#+end_src

 LaTeX-table-wizard will always presume the table you want operate on
 has a syntax specified like this.  But suppose you use different
 environments with non-standard syntax: suppose you define a
 table-like environment of your choice, let's call it ~mytable~, that
 uses ~!ROW~ and ~!COL~ instead of ~&~ and ~\\~ as delimiters, and a macro
 ~\horizontal~ for horizontal lines.  When you are in a ~mytable~
 environments, you want LaTeX-table-wizard to adapt to this new
 syntax.

 All you need to do add an appropriate cons cell to the
 ~latex-table-wizard-new-environments-alist~ association list, mapping
 the name of the environment, as a string, to a property list
 specifying the values.  For the case of ~mytable~ you would do:

 #+begin_src emacs-lisp
(add-to-list 'latex-table-wizard-new-environments-alist
             '("mytable" . (:col ("!COL") :row ("!ROW") :lines ("horizontal"))))
 #+end_src
