* Gnorb

Glue code between the Gnus, Org, and BBDB packages for Emacs.

This package connects Emacs-based email, project management, and
contact management a little more closely together. The goal is to
reduce friction when manipulating TODOs, contacts, messages, and
files. An underlying principle is that one should stay in the Org
Agenda as much as possible: Gnus should serve as input/output for the
Agenda, and BBDB should serve as an alternate view on information.
This isn't actually enforced, of course, it's just an ideal.

Put "gnorb/lisp" in your load path, then either require "gnorb" to
load everything, or pick bits and pieces: "gnorb-gnus", "gnorb-org",
or "gnorb-bbdb".

Recommended keybindings/integration measures are shown below. Copy
them into your init files and edit as you see fit.

Code in this package is aimed at the development (git) versions of
Gnus, Org, and BBDB (that means BBDB 3: upgrade, already!). I'll try
to make it work with the most recent stable releases of those
packages, but I'm not promising anything.

Most of the functions listed later in this README are fairly discrete:
they do one thing only, and (I hope) don't require anything special in
terms of file formats or workflow. A few exceptions to that are listed
below.
** Using Gnorb for Tracking Email TODOs
Because we try to track email messages and related TODOs round-trip --
incoming and outgoing under one TODO representing a conversation -- it
works best if things match up at both ends. Specifically:
*** Capture templates for emails
Most people will be using plain capture templates to create TODOs from
messages. You'll almost always want to save a link to the message, so
you can get back to it later. Once the TODO is made, you can call
`gnorb-org-handle-mail' on it, to look for message and mail links and
automatically start a reply to the original message. The option
`gnorb-org-mail-scan-strategies' determines how the TODO heading and
its subtree are scanned for links -- see the docstring of that option.

Your capture template should therefore put the link where
`gnorb-org-handle-mail' can find it. Say your capture template looks
like this:

#+BEGIN_SRC emacs-lisp
  '("r" "Work-related Reply" entry (file+headline "~/org/job.org" "Emails")
    "** REPLY %:fromname\n%?Received on %:date-timestamp-inactive, link: %a"
    :gnus-attachments t)

#+END_SRC

In this case, you'll want a scan strategy that looks at the first
paragraph of body text.

*** Tracking conversations
It can be useful to use a single TODO heading to keep track of the
salient points of an entire email back-and-forth conversation -- a
business negotiation, for instance. You can do this by using TODO
keywords that trigger state-change notes, and putting links to emails
into those notes. That way, your logbook becomes a full record of the
conversation.

For example, you might have two keywords, "REPLY" and "WAIT", which
both trigger state-change notes. Say you call `gnorb-org-handle-mail'
on a heading that's set to "REPLY", then send the email. You'll be
returned to the heading and prompted to change its state. Change it to
"WAIT" and leave a note.

When you receive a reply to your sent email, call
`gnorb-gnus-incoming-do-todo' on that message. You'll be taken back to
the TODO, and again prompted to change its state. Change it to
"REPLY", and again leave a note. Gnorb stores a link to the incoming
message automatically, so insert the link into the note.

Now your TODO has a logdrawer with a link to the most
recently-received email in the most recent state-change note. If
`gnorb-org-mail-scan-state-changes' is set to 'first, then the next
time you call `gnorb-org-handle-mail' on the heading, everything else
will be disregarded in favor of replying to that most recent email.

That way, you can use the paired keywords "REPLY" and "WAIT", and the
paired functions `gnorb-org-handle-mail' and
`gnorb-gnus-incoming-do-todo', to play a sort of email ping-pong.

Of course you don't /have/ to use this sort of system, Gnorb just
gives you the bits and pieces to put it together.

PS: What if you receive an email that's relevant to a TODO, and just
want to reply to it on the spot (ie, without going through the whole
`gnorb-gnus-incoming-do-todo' and state-change rigmarole)? In that
case, you can use `gnorb-gnus-outgoing-do-todo' on the reply as you're
composing it (or right after you've sent it), and Gnorb will notice
that it is part of an ongoing conversation. The only thing it
(currently) won't do is automatically store a link to the message you
just replied to, so if you want to put that into the conversation,
you'll have to do it manually.
*** Hinting in Gnus
When you receive new mails that might be relevant to existing Org
TODOs, Gnorb can alert you to that fact. When
`gnorb-gnus-hint-relevant-article' is t (the default), Gnorb will
display a message in the minibuffer when opening potentially relevant
messages. You can then use `gnorb-gnus-incoming-to-todo' to act on
them: usually triggering a state change on the relevant TODO.

This hinting can happen in the Gnus summary buffer as well. If you use
the escape indicated by `gnorb-gnus-summary-mark-format-letter" as
part of your `gnus-summary-line-format', articles that are relevant to
TODOs will be marked with a special character in the Summary buffer,
as determined by `gnorb-gnus-summary-mark'. By default, the format
letter is "g" (meaning it is used as "%ug" in the format line), and
the mark is "ยก".
** Showing gnus messages from links in Org buffers
Sometimes you've got an Org subtree containing a bunch of Gnus links,
and you'd like to see all those message in a single Gnus summary
buffer. Gnorb can do this, but you'll have to add a new backend to
your list of Gnus servers. If that makes your skin crawl a little, it
probably should. But no fear! The server essentially does nothing but
provide a place for nnir to hang searches.

Add an entry like this to your `gnus-secondary-select-methods':

(nngnorb "Purely Decorative Server Name")

And restart Gnus. Now, on any given Org subtree, you can call
`gnorb-org-view', and you'll be presented with an nnir *Summary*
buffer containing all the messages linked to within the subtree.

As a bonus, it's possible to go into Gnus' *Server* buffer, find the
line specifying your nngnorb server, and hit "G" (aka
`gnus-group-make-nnir-group'). At the query prompt, enter an Org-style
tags-todo Agenda query string (eg "+work-computer", or what have you).
Gnorb will find all headings matching this query, scan their subtrees
for gnus links, and then give you a *Summary* buffer containing all
the linked messages.
** Recent mails from BBDB contacts
If you're using a recent git version of BBDB (circa mid-may 2014 or
later), you can give your BBDB contacts a special field which will
collect links to recent emails from that contact. The default name of
the field is "messages", but you can customize that name using the
`gnorb-bbdb-messages-field' option.

Gnorb will not collect links by default: you need to call
`gnorb-bbdb-open-link' on a contact once to start the process.
Thereafter, opening mails from that contact will store a link to the
message.

Once some links are stored, `gnorb-bbdb-open-link' will open them: Use
a prefix arg to the function call to select particular messages to
open. There are several options controlling how all this works; see
the gnorb-bbdb user-options section below for details.
** BBDB posting styles
Gnorb comes with a BBDB posting-style system, inspired by (copied
from) gnus-posting-styles. You can specify how messages are composed
to specific contacts, by matching on contact field values (the same
way gnus-posting-styles matches on group names). See the docstring of
`gnorb-bbdb-posting-styles' for details.

In order not to be too intrusive, Gnorb doesn't alter the behavior of
`bbdb-mail', the usual mail-composition function. Instead it provides
an alternate `gnorb-bbdb-mail', which does exactly the same thing, but
first processes the new mail according to `gnorb-bbdb-posting-styles'.
If you want to use this feature regularly, you can rebind "m" in
`bbdb-mode-map' to `gnorb-bbdb-mail'.
** Using attach with org capture
Set the new :gnus-attachments key to "t" in a capture template that
you use on mail messages, and you'll be queried to re-attach the
message's attachments onto the newly-captured heading. Or set
`gnorb-gnus-capture-always-attach' to "t" to have Gnorb do this for
all capture templates.
** Gnorb-BBDB
*** Interactive Functions
**** gnorb-bbdb-tag-agenda
Give BBDB records an org-tag field (customizable), then call this
function on the current records(s) to open an Org agenda tags search
using those tags. Only shows TODOs by default: use a prefix argument
to show all tagged headings.
**** gnorb-bbdb-mail-search
Search for all mail messages from the record(s) displayed. Currently
supports the notmuch, mairix, and namazu search backends; set
`gnorb-gnus-mail-search-backend' to one of those symbol values.
**** gnorb-bbdb-cite-contact
Prompt for a BBDB record and insert a string of the type "Bob Smith
<bob@smith.com>".
**** gnorb-bbdb-mail
Exactly like `bbdb-mail', except it runs the records through
`gnorb-bbdb-posting-styles' first, and alters the composed message
accordingly.
**** gnorb-bbdb-open-link
Open a message linked to from within a BBDB record's
`gnorb-bbdb-messages-field'. Use prefix args to select the exact
message. If a record is not yet collecting links, use this function to
start the collection process.
*** User Options
**** gnorb-bbdb-org-tag-field
The name of the BBDB xfield that holds Org-related tags. Specified as
a string with the ":" separator between tags, same as for Org
headings. Defaults to 'org-tag.
**** gnorb-bbdb-messages-field
The name of the BBDB xfield that holds links to recently-received
messages from this contact. Defaults to 'messages.
**** gnorb-bbdb-collect-N-messages
Collect at most this many links to messages from this contact.
Defaults to 5.
**** gnorb-bbdb-define-recent
What does "recently-received" mean? Possible values are 'seen and
'received. When set to 'seen, the most recently-opened messages are
collected. When set to 'received, the most recently-received (by Date
header) messages are collected. Defaults to 'seen.
**** gnorb-bbdb-message-link-format-multi
How is a single message's link formatted in the multi-line BBDB layout
format? Defaults to "%:count. %D: %:subject" (see the docstring for
details).
**** gnorb-bbdb-message-link-format-one
How is a single message's link formatted in the one-line BBDB layout
format? Defaults to nil (see the docstring for details).
**** gnorb-bbdb-posting-styles
Styles to use for influencing the format of mails composed to the BBDB
record(s) under point (see the docstring for details).
*** Suggested Keybindings
#+BEGIN_SRC emacs-lisp
  (eval-after-load "gnorb-bbdb"
    '(progn
       (define-key bbdb-mode-map (kbd "O") 'gnorb-bbdb-tag-agenda)
       (define-key bbdb-mode-map (kbd "S") 'gnorb-bbdb-mail-search)
       (define-key bbdb-mode-map (kbd "m") 'gnorb-bbdb-mail)
       (define-key bbdb-mode-map (kbd "l") 'gnorb-bbdb-open-link)
       (global-set-key (kbd "C-c C") 'gnorb-bbdb-cite-contact)))
#+END_SRC
** Gnorb-Org
*** Functions
**** gnorb-org-contact-link
Prompt for a BBDB record and insert a link to that record at
point.
**** gnorb-org-handle-mail
This function does its best to interpret the heading under point as an
email action.

If the heading text contains a link to a Gnus message then start a
reply to that message, otherwise start composing a new message. If the
heading contains mailto links or BBDB links, put those addresses in
the "To" field of the new message (or reply). If the heading has
org-attach'ed attachments, prompt to attach them to the outgoing
message.

When the message is sent, return to the original Org buffer. If the
heading's TODO keyword is a member of `gnorb-org-mail-todos' (by
default, "MAIL" and "REPLY"), then call `org-agenda-todo' and prompt
to mark the TODO as done. Set that option to nil to prompt for all
TODO keywords.

This works best with a matching capture template: the template stores
a link to the message under point within the headline text, and this
command replies to that message in a DWIM style.

**** gnorb-org-email-subtree
Call on a Org subtree to export the subtree as either text or a file.
Then compose a message with the text in the message body, or the file
attached to the message. See the `gnorb-org-email-subtree-*' user
options for influencing this process.

There's a little overlap with org-mime, but this function allows for
exporting the subtree as a file, and does not compose a MIME-multipart
HTML message. I may look into integrating it a bit with org-mime
later.

This function also overlaps with `gnorb-org-handle-mail'. The only
difference is that it will first prompt to export the subtree of the
heading under point. After that, it behaves much like
`gnorb-org-handle-mail'.

Use `gnorb-org-handle-mail' when the primary purpose of the heading is
as a TODO reminding you to send or reply to an email. Any text under
the heading will be disregarded.

Use `gnorb-org-email-subtree' when the primary purpose of the heading
is the text (or tables or lists or...) of its subtree, and you just
happen to want to email that content to someone.

**** gnorb-org-popup-bbdb
Pop up a BBDB buffer relevant to the current Org display. This works
differently depending on whether you're in the Agenda, or in a regular
Org file.

In an Agenda buffer currently displaying an `org-tags-view' search (ie
called with the "m" or "M" keys), it will look through your BBDB
database and pop up a BBDB buffer displaying all records that match
the current tags search.

In a regular file, it will look at the heading under point for bbdb:
links, and pop up a BBDB buffer showing those records.
**** gnorb-org-view
If you've got a 'nngnorb backend installed in your gnus select
methods, you can use this function on a subtree to scan it for gnus
links and open all linked messages in a nnir summary buffer.
*** User Options
**** gnorb-org-mail-scan-strategies
This option provides various strategies for how the
`gnorb-org-handle-mail' and `gnorb-org-email-subtree' functions act on
links within the subtree at point. Three different options are
provided, for flexibility -- see the docstring for details.
**** gnorb-org-capture-collect-link-p
When this is set to t, the capture process will always store a link to
the Gnus message or BBDB record under point, even when the link isn't
part of the capture template. It can then be added to the captured
heading with org-insert-link, as usual.
**** gnorb-org-agenda-popup-bbdb
Set to t to automatically pop up the BBDB buffer displaying records
corresponding to the Org Agenda tags search underway. If this is nil
you can always do it manually with the command of the same name.
**** gnorb-org-bbdb-popup-layout
Controls the layout of the Agenda-related BBDB popup, takes the same
values as bbdb-pop-up-layout.
*** Suggested Keybindings
#+BEGIN_SRC emacs-lisp
  (eval-after-load "gnorb-org"
    '(progn
       (org-defkey org-mode-map (kbd "C-c C") 'gnorb-org-contact-link)
       (org-defkey org-mode-map (kbd "C-c H") 'gnorb-org-handle-mail)
       (org-defkey org-mode-map (kbd "C-c e") 'gnorb-org-view)
       (org-defkey org-mode-map (kbd "C-c E") 'gnorb-org-email-subtree)
       (org-defkey org-mode-map (kbd "C-c V") 'gnorb-org-popup-bbdb)
       (setq gnorb-org-agenda-popup-bbdb t)
       (eval-after-load "org-agenda"
         '(progn (org-defkey org-agenda-mode-map (kbd "H") 'gnorb-org-handle-mail)
                 (org-defkey org-agenda-mode-map (kbd "V") 'gnorb-org-popup-bbdb)))))
#+END_SRC
** Gnorb-Gnus
*** Functions
**** gnorb-gnus-article-org-attach
When called on an email with attached files, prompt for an Org heading
and attach the files to that heading using org-attach.
**** gnorb-gnus-incoming-do-todo
Call on an incoming message that should trigger a state change or a
note on an existing TODO. You'll be asked to locate the appropriate
TODO, and the action will depend in part on the value of
`gnorb-gnus-message-trigger-default', which see. If the incoming
message refers to messages that are already tracked in a conversation,
Gnorb will prompt you with the relevant TODO.
**** gnorb-gnus-outgoing-do-todo
Call this while composing a new message (ie in message-mode), or
immediately after sending a message. If the message is a new one (ie
it's not part of an email conversation that's already being tracked) a
new TODO will be made from it. This is handy when you need to make
sure you get a response, for instance. New TODOs are created using the
capture process, and you'll need to specify a capture template to use
for outgoing messages: see `gnorb-gnus-new-todo-capture-key'.

If you call this on a message that's part of an already-tracked
conversation, you'll be prompted to change TODO state or leave a note
on that conversation.
*** User Options
**** gnorb-gnus-mail-search-backend
Specifies the search backend that you use for searching mails.
Currently supports notmuch, mairix, and namazu: set this option to one
of those symbols.
**** gnorb-gnus-capture-always-attach
Treat all capture templates as if they had the :gnus-attachments key
set to "t". This only has any effect if you're capturing from a Gnus
summary or article buffer.
**** gnorb-trigger-todo-default
Set to either 'note or 'todo to tell `gnorb-gnus-incoming-do-todo'
what to do by default. You can reach the non-default behavior by
calling that function with a prefix argument. Alternately, set to
'prompt to always prompt for the appropriate action.
**** gnorb-gnus-trigger-refile-targets
If you use `gnorb-gnus-incoming-do-todo' on an incoming message, Gnorb
will try to locate a TODO heading that's relevant to that message. If
it can't, it will prompt you for one, using the refile interface. This
option will be used as the value of `org-refile-targets' during that
process: see the docstring of `org-refile-targets' for the appropriate
syntax.
**** gnorb-gnus-new-todo-capture-key
Set this to a single-character string pointing at an Org capture
template to use when creating TODOs from outgoing messages. The
template is a regular capture template, with a few exceptions. If Gnus
helps you archive outgoing messages (ie you have
`gnus-message-archive-group' set to something, and your outgoing
messages have a "Fcc" header), a link to that message will be made,
and you'll be able to use all the escapes related to gnus messages. If
you don't archive outgoing messages, you'll still be able to use the
%:subject, %:to, %:toname, %:toaddress, and %:date escapes in the
capture template.
**** gnorb-gnus-hint-relevant-article
Set to "t" (the default) to have Gnorb give you a hint in the
minibuffer when opening messages that might be relevant to existing
Org TODOs.
**** gnorb-gnus-summary-mark-format-letter
The formatting letter to use as part of your
`gnus-summary-line-format', to indicate messages which might be
relevant to Org TODOs. Defaults to "g", meaning it should be used as
"%ug" in the format line.
**** gnorb-gnus-summary-mark
The mark used to indicate relevant messages in the Summary buffer,
when `gnorb-gnus-summary-mark-format-letter' is present in the format
line. Defaults to "ยก".
*** Suggested Keybindings
#+BEGIN_SRC emacs-lisp
  (eval-after-load "gnorb-gnus"
    '(progn
       (define-key gnus-summary-mime-map "a" 'gnorb-gnus-article-org-attach)
       (define-key gnus-summary-mode-map (kbd "C-c t") 'gnorb-gnus-incoming-do-todo)
       (push '("attach to org heading" . gnorb-gnus-mime-org-attach)
             gnus-mime-action-alist)
       ;; The only way to add mime button command keys is by redefining
       ;; gnus-mime-button-map, possibly not ideal. Ideal would be a
       ;; setter function in gnus itself.
       (push '(gnorb-gnus-mime-org-attach "a" "Attach to Org heading")
             gnus-mime-button-commands)
       (setq gnus-mime-button-map
             (let ((map (make-sparse-keymap)))
               (define-key map gnus-mouse-2 'gnus-article-push-button)
               (define-key map gnus-down-mouse-3 'gnus-mime-button-menu)
               (dolist (c gnus-mime-button-commands)
                 (define-key map (cadr c) (car c)))
               map))))

  (eval-after-load "message"
    '(progn
       (define-key message-mode-map (kbd "C-c t") 'gnorb-gnus-outgoing-do-todo)))
#+END_SRC
** Wishlist/TODO
- Support adding X-Org-Id headers to Gnus messages, which point at
  relevant Org headings (possibly not really useful).
- Provide a command that, when in the Org Agenda, does an email search
  for messages received in the visible date span, or day under point,
  etc. Make it work in the calendar, as well?
- Look into message tagging in Gnus -- what are the options? Is it
  possible to search for tagged messages when we do an Org agenda tag
  search?
- Consider merging `gnorb-org-handle-mail' and
  `gnorb-org-email-subtree' altogether.
