#+startup: showall

* Adding tests

To add a test, create file.m in this directory, and file.m.expected.txt.

The metest-fill-paragraph function in mstest.el will run M-q within each comment in and verify
that the results match file.m.expected.txt.

Note, when creating file.m.expected.txt, run Emacs without an customizations:

  #+begin_src bash
    M=/path/to/Emacs-MATLAB-mode
    env MATLABPATH=  emacs -Q -L $M -l $M/matlab-autoload.el
  #+end_src

* C++ behavior

It seems reasonable to compare the C++ behavior with MATLAB behavior to ensure things are consistent.

Using emacs -Q, consider the following, typing M-q on any character, whether in a comment or not
will leave things as is

  #+begin_src cpp
    int foo(int bar1, // a comment for bar1
            int bar2  // a comment for bar2
          ) {
      // help comment
      return bar1 + bar2 * 2;
    }
  #+end_src

The similar code would be commentAfterFcn.m

  #+begin_src matlab
  function foo=commentAfterFcn(bar1, ... % a comment for bar1
                               bar2) ... % a comment for bar2
  % help comment
      foo = bar1 + bar2 * 2;
  end
  #+end_src


* Issues

1. matlab.el has several fill functions. Reduce to one matlab-fill-paragraph bound to M-q.

   - delete matlab-fill-comment-line  (this is bound to non-standard C-c C-f)
   - delete matlab-fill-region (this is bound to non-standard C-c C-q)

2. Corruption when point is in a comment

   Using commentAfterFcn.m, if you place the point after the '%' in the "% a comment for bar1" line
   or "% a comment for bar2" line and type M-q, you'll get:

  #+begin_src matlab
    function foo=commentAfterFcn(bar1, ... % a comment for bar1
     % help comment
        foo = bar1 + bar2 * 2;
    end
  #+end_src

3. Incorrect move of the help comment

   Using commentAfterFcn.m, if you place the point after the '%' in the "% help comment" line and
   type M-q, you'll get:

   #+begin_src matlab
     function foo=commentAfterFcn(bar1, ... % a comment for bar1
                                  bar2) ... % a comment for bar2 help comment
         foo = bar1 + bar2 * 2;
     end
   #+end_src

4. Corruption when point is not in a comment

   Using commentAfterFcn.m, if you place the point on the 'f' in the "foo = bar1 + bar2 * 2;" line
   and type M-q, you'll get:

   #+begin_src matlab
     function foo=commentAfterFcn(bar1, ... % a comment for bar1
                                  bar2) ... % a comment for bar2
     % help comment foo = bar1 + bar2 * 2; end
   #+end_src

   Similar case, using [[file:filltests.m]], place point on 'C' in the "C=A+B;" line and
   fill, it will pull up the end statement:

   #+begin_src matlab
     function C = filltests()
         % <snip>
         C=A+B;
     end
   #+end_src

   M-q yields:

   #+begin_src matlab
     function C = filltests()
         % <snip>
         C=A+B; end
   #+end_src

5. Unbalanced parenthesis error on invalid M-code.

   Using

   #+begin_src matlab
     function foo=commentAfterFcnErr(bar1, ... % a comment for bar1
      % help comment
         foo = bar1 + bar2 * 2;
     end
   #+end_src

   And placing point on the 'f' in "foo = bar1 + bar2 * 2;" line, we'll get:

   #+begin_example
     Debugger entered--Lisp error: (scan-error "Unbalanced parentheses" 32 111)
     matlab-end-of-outer-list()
     matlab-scan-end-of-command()
     matlab-fill-paragraph(nil)
     fill-paragraph(nil t)
     funcall-interactively(fill-paragraph nil t)
     command-execute(fill-paragraph)
   #+end_example

# LocalWords:  showall metest mstest env filltests funcall
