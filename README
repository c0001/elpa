#+TITLE: GNU ELPA README
#+DATE: 2020-11-28

Copyright (C) 2010-2011, 2014-2020 Free Software Foundation, Inc. \\
See the end of the file for license conditions.

This branch contains auxiliary files for [[https://elpa.gnu.org/][GNU ELPA]].

The sources are stashed in auxiliary branches,
and the deployment scripts, are in the =elpa-admin= branch.
The =Makefile= will automatically pull that last branch
to populate the =admin= subdirectory, whose own makefile
will in turn populate the =packages= subdirectories from
the relevant sources.

This file explains the branch layout, how to add and edit packages,
and how to deploy the archive (either on =elpa.gnu.org=, or a local copy
for testing purposes).


* Getting the source

Start with source that is cloned directly from Savannah.  See [[https://savannah.gnu.org/git/?group=emacs][the Savannah page]]
and look for "ELPA".  Using a clone of a clone does not work.

You must then do some setup:
#+begin_src shell
   make setup
#+end_src

That leaves the =packages= directory empty; you must check out the
ones you want.

If you wish to check out all the packages into the =packages=
directory, you can run the command:

#+begin_src shell
   make worktrees
#+end_src

You can check out a specific package =<pkgname>= into the =packages=
directory with this command:

#+begin_src
   make packages/<pkgname>
#+end_src

If you already have a =packages/<pkgname>= directory with a previous
checkout, you can update it like this:

#+begin_src
   cd packages/PACKAGE
   git pull
#+end_src

* Directory layout

** =admin/=    -- scripts for administering the package archive.
** =html/=     -- HTML for the elpa.gnu.org website.
** =packages/= -- source code for the packages.
** =archive/=  -- destination of the release tarballs built.
** =archive-devel/=  -- destination of the snapshot tarballs built.

* Packages

** Contents of the =packages/= directory:
This directory holds the package sources, with one subdirectory for
each package.

Each directory in here corresponds to a package.

A nightly cron job refreshes the GNU ELPA archive from this repository.

This cron job only creates a new package when the "version" (as specified in
the =Version:= header) of a package is modified.  This means that you can
safely work on the next version here without worrying about the unstable
code making it to GNU ELPA, and simply update the =Version:= when you want to
release the new code.

** To add a package: (submission, submit)

Adding a basic package is very simple.  There are thorough
instructions below, but the gist of it is that you:

1. Notify [[mailto:emacs-devel@gnu.org][emacs-devel@gnu.org]].
2. Push your package's code to its branch on elpa.git with:

   #+begin_src shell
   git push elpa <mybranch>:refs/heads/externals/<pkgname>
   #+end_src

   where =<mybranch>= will probably be =master= for most people.
   [ Note: The name "externals/" is the result of an accident of history.  ]

3. Edit the =elpa-packages= file to add an entry for =<pkgname>=.
   It has to have an =:url= property specified but that
   property can be nil.
4. =git add elpa-packages=, =git commit= and =git push=.

If you don't have push access to the repository, someone will do steps
2-4 for you.

*** Notify emacs-devel@gnu.org

There is no approval process for GNU ELPA packages.  Still,
you must send an email to =emacs-devel= for several reasons:

- Notifying other developers;
- Making sure the package doesn't break FSF rules;
- Checking if the package is not reinventing the wheel;
- Ensuring that first-time developers are doing it right.

Before doing anything, please ensure your package follows the
conventions described in the [[Format]] section.  Then, send an email
to the list with the subject:
 :  [ELPA] New package: <pkg-name>

Start your message with an explanation about the package.  A
copy-paste of the package's =Summary= and =Commentary= is perfectly fine
here, but you can write more or less than that if you'd like.

In your message include the URL of a Git repository where your package can
be found (or if that's not convenient and the package is small enough,
include a copy of its code as an attachment).  If you prefer (and if you
have push access), you can push your changes to a branch called
=scratch/<pkg-name>=, and mention the branch in your message.

After 48 hours, or once any issues have been addressed, someone will push
your changes for you.  You should probably also subscribe to
[[https://lists.gnu.org/mailman/listinfo/emacs-devel][emacs-devel@gnu.org]], since that's where we discuss about GNU ELPA, and
to [[https://lists.gnu.org/mailman/listinfo/bug-gnu-emacs][bug-gnu-emacs@gnu.org]], since that's where people will report bugs
about your package.

*** Add a simple package as =<pkg-name>.el=.

The file needs to follow the usual coding conventions (most importantly start
with =";;; <file> --- <description> -*- lexical-binding: t -*-"=) and have a
=Version:= and =Maintainer:= pseudo-header (see the [[Format]] subsection
below).

For some examples, see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Packages.html][Simple Packages]] (web link) or in Emacs:
#+begin_src elisp
    (info "(elisp) Simple Packages")
#+end_src

*** Add a multi-file package as a directory

It needs to have a file named =<pkg-name>/<pkg-name>.el= which follows the
same rules as above.

It additionally follows the same guidelines described in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Multi_002dfile-Packages.html][Multi-File Packages]]
(web link) or in Emacs
#+begin_src elisp
    (info "(elisp) Multi-file Packages")
#+end_src
with the exception that it is not a tar package (it's a plain
directory) and it must not contain a =<pkg-name>-pkg.el= file (this
will be created for you).

*** Check the copyright

Now run =make check_copyrights=.

That command does a very crude check to try and catch the files which lack
the usual license and copyright blurb (that's the role of the first =find=),
and to catch the files which still have a "copyright <not-the-fsf>" somewhere.

If your package fails that check, please fix the files accordingly.
Of course, occasionally those checks misfire (for a few rare files which
we admitted without their copyright being transferred to the FSF, or
because the word "copyright" appears in the body of the file), in
which case the right fix is to update the =copyright_exceptions= file.

*** Commit your changes the usual way (=git add=, =git commit=, etc.)

Changes in the Git repository do not immediately propagate to the
user-facing archive (what users see when they do =M-x list-packages=).
That is done by deploying the archive, which happens automatically
once a day, and the changes are only reflected when the =Version:=
header changes.

** Format

Each package should follow the ELPA packaging conventions, but there are
some differences due to the way the deployment script creates the packages
and the web-pages from this source code:
- Multi-file packages put the package metadata in the main =<pkg-name>.el= file
  in the format used for single-file packages: the =<pkg-name>-pkg.el= file is
  auto-generated from it.
- Every package should have both a =Version:= /and/ a =Maintainer:=.
- The =URL:= header can be used to specify the home page
  of the package, if it's maintained externally.
- A =News:= section (or "NEWS" file) can/should be used to list the
  user-visible changes of each version.
- If you want some files to not be included in the tarball, you can
  put a =.elpaignore= file in the root of your package directory, where you
  can list patterns of files to ignore (this file is passed to =tar='s =-X=).

** Coding style

We do not impose a particular coding style on GNU ELPA packages, but of
course we recommend the coding style used in Emacs's own source code.
Furthermore we recommend the following:
- Use =cl-lib= rather than =cl= if at all possible.
- Use =lexical-binding= if at all possible.
- Try and fix the warnings emitted when compiling the package with a recent Emacs.

The Copyright notice should specify "Free Software Foundation, Inc." as
the copyright holder.  Ensure that all the code has the proper copyright:
if it is not your own code, make sure the author has signed the relevant
copyright papers (for non-trivial contributions), and indicate the author
correctly in the commit.

** External branches

A copy of the code of every package is kept in the =elpa.git= repository
(not in the =master= branch) and if applicable should be sync'd with the
upstream every once in a while.  This copy may include local changes,
although these should be kept to a minimum.

The copy of the code is not kept in =master= but in the
=externals/<pkg-name>= branch in the =elpa.git= repository.
[ Note: The name "externals/" is the result of an accident of history.  ]

To add a new package, first add this =elpa.git= repository as a
new remote in your existing repository.

Then push a local branch to a
new remote branch in =elpa.git=, named =externals/<pkgname>=.  For example:

#+begin_src shell
   git push elpa <mybranch>:refs/heads/externals/<pkgname>
#+end_src

For example, let's say that you want to add =realgud-ipdb= which is currently
checked out in =$HOME/github/realgud-ipdb=:

#+begin_src shell
   cd $HOME/github/realgud-ipdb
   git remote add elpa ${USER}@git.sv.gnu.org:/srv/git/emacs/elpa.git
   git push elpa master:refs/heads/externals/realgud-ipdb
#+end_src

Then edit the =elpa-packages= file as mentioned above, add the line

#+begin_src elisp
   ("realgud-ipdb" :url "https://github.com/realgud/realgud-ipdb")
#+end_src

and push that change to the master branch of =elpa=.  After it's added to
the =elpa-packages= file, the package can be maintained just by
pushing changes to the =externals/<pkgname>= branch.

** Public incubation

If you want to develop a package publicly prior to its first release (to
benefit from others' feedback, primarily), but not in an external repo,
you have two choices:
- you can simply put =Version: 0= to indicate that this should not be
  released yet.
- or you can push to an "ephemeral" branch -- subject to rebase and eventual
  removal upon finishing merge -- for the duration of the incubation.

* Deployment

** To install all the packages "in place":

#+begin_src shell
   make worktrees
   make
#+end_src

This compiles and generates autoloads for all the packages in the
=packages/= directory.  You can then add that directory, e.g. with:

#+begin_src elisp
(eval-after-load 'package
  '(add-to-list 'package-directory-list ".../elpa/packages"))
#+end_src

** To deploy the package repository as a remotely-accessible archive:

#+begin_src shell
   make build-all
#+end_src

This deploys the packages to the =archive/= subdirectory.
Unlike =make=, this makes a full copy of the packages, tars up
multi-file packages, and doesn't byte-compile any files.

** To access a deployed archive

To access the archive via HTTP, have a symlink (say) =/var/www/packages=
pointing to the =archive/= subdirectory, and set up Emacs with

#+begin_src elisp
  (setq package-archives '(("new-elpa" . "http://foo.com/packages")))
#+end_src

You can also access the archive via normal file access.  Such "local
archives" are useful for debugging:

#+begin_src elisp
  (setq package-archives '(("local-elpa" . ".../elpa/archive")))
#+end_src

** Notes specific to =elpa.gnu.org=

The way things are set up on this machine, we refresh the archive by
a cron job.  You can do it by hand by logging in (access set up by FSF
admins), and

#+begin_src shell
   su - elpa
   cd elpa
   make build-all
#+end_src

Which makes a full archive deployment, as discussed above.  The symlink
=/var/www/packages= points to the corresponding directory under
=/home/elpa/=.

* License
This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.


#+STARTUP: showall
#+OPTIONS: num:1
#+AUTHOR: GNU ELPA Maintainers
#+EMAIL: emacs-devel@gnu.org
#+BEGIN_COMMENT
Local variables:
mode: org
paragraph-separate: "[ 	]*$"
time-stamp-pattern: "4/#\\+DATE: %Y-%02m-%02d$"
end:
#+END_COMMENT
